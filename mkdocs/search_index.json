{
    "docs": [
        {
            "location": "/", 
            "text": "Pythia Examples\n\n\nThe examples here are written in markdown (\n.md\n) container files that encapsulates: documentation, multiple languages and data formats.\n\n\nMulti-exe\n\n\nMultiple executeables in different languages can be compiled from a single markdown,\nsee this \nexample\n.\n\n\nSupported Languages\n\n\n\n\nC/C++\n\n\nGo\n\n\nNim\n\n\nRust\n\n\nPython\n\n\nCython\n\n\nCoffeeScript\n\n\nRapydScript\n\n\nJavaScript", 
            "title": "Home"
        }, 
        {
            "location": "/#pythia-examples", 
            "text": "The examples here are written in markdown ( .md ) container files that encapsulates: documentation, multiple languages and data formats.", 
            "title": "Pythia Examples"
        }, 
        {
            "location": "/#multi-exe", 
            "text": "Multiple executeables in different languages can be compiled from a single markdown,\nsee this  example .", 
            "title": "Multi-exe"
        }, 
        {
            "location": "/#supported-languages", 
            "text": "C/C++  Go  Nim  Rust  Python  Cython  CoffeeScript  RapydScript  JavaScript", 
            "title": "Supported Languages"
        }, 
        {
            "location": "/hello_angular/", 
            "text": "Angular.js Hello World\n\n\nhttps://angularjs.org/\n\n\nNote: \nangular.min.js\n is automatically downloaded if not found in your home directory under \nrusthon_cache\n,\nsee the special \nsource\n attribute of the \nscript\n tag below that instructs the transpiler to do the download.\n\n\nhtml\n\n\nhead\n\n\nlink href='~/bootstrap-3.3.5-dist/css/bootstrap.css' rel='stylesheet' zip=\nhttps://github.com/twbs/bootstrap/releases/download/v3.3.5/bootstrap-3.3.5-dist.zip\n/\n\n\nscript src=\n~/rusthon_cache/jquery-2.1.4.min.js\n source=\nhttp://code.jquery.com/jquery-2.1.4.min.js\n/script\n\n\nscript src=\n~/bootstrap-3.3.5-dist/js/bootstrap.min.js\n/script\n\n\n\nscript src=\n~/rusthon_cache/angular.min.js\n source=\nhttps://ajax.googleapis.com/ajax/libs/angularjs/1.3.9/angular.min.js\n/script\n\n\n\n@myscript\n\n\n\n/head\n\n\nbody\n\n\n\ndiv ng-app=\ninvoice1\n ng-controller=\nInvoiceController as invoice\n\n  \nb\nInvoice:\n/b\n\n  \ndiv class=\nwell\n\n    Quantity: \ninput type=\nnumber\n min=\n0\n ng-model=\ninvoice.qty\n required \n\n  \n/div\n\n  \ndiv class=\nwell\n\n    Costs: \ninput type=\nnumber\n min=\n0\n ng-model=\ninvoice.cost\n required \n\n    \nselect ng-model=\ninvoice.inCurr\n\n      \noption ng-repeat=\nc in invoice.currencies\n{{c}}\n/option\n\n    \n/select\n\n  \n/div\n\n  \ndiv class=\nwell\n\n    \nb\nTotal:\n/b\n\n    \nspan ng-repeat=\nc in invoice.currencies\n\n      {{invoice.total(c) | currency:c}}\n    \n/span\n\n    \nbutton class=\nbtn\n ng-click=\ninvoice.pay()\nPay\n/button\n\n  \n/div\n\n\n/div\n\n\n\n/body\n\n\n/html\n\n\n\n\n\nAbove a special syntax is used \n@myscript\n this tells Rusthon where to insert the output of scripts it translates using the javascript backend.\n\n\nrusthon\n\n\nBelow \n@myscript\n is given on the line just before the fenced rusthon code block.  This allows you to insert multiple scripts into your html, in the head or body.\n\n\n@myscript\n\n\n#backend:javascript\nfrom runtime import *\n\nmodule = angular.module('invoice1', [])\n\ndef invoice_controller():\n    this.qty = 1\n    this.cost = 2\n    this.inCurr = 'EUR'\n    this.currencies = ['USD', 'EUR', 'CNY']\n    this.usdToForeignRates = {\n        'USD': 1,\n        'EUR': 0.74,\n        'CNY': 6.09\n    }\n\n    def total(outCurr):\n        return this.convertCurrency(this.qty * this.cost, this.inCurr, outCurr)\n    def convertCurrency(amount, inCurr, outCurr):\n        return amount * this.usdToForeignRates[outCurr] / this.usdToForeignRates[inCurr]\n    def pay():\n        window.alert(\nThanks!\n)\n\n    this.pay = pay\n    this.total = total\n    this.convertCurrency = convertCurrency\n\nmodule.controller('InvoiceController', invoice_controller)", 
            "title": "Angular"
        }, 
        {
            "location": "/hello_angular/#angularjs-hello-world", 
            "text": "https://angularjs.org/  Note:  angular.min.js  is automatically downloaded if not found in your home directory under  rusthon_cache ,\nsee the special  source  attribute of the  script  tag below that instructs the transpiler to do the download.  html  head  link href='~/bootstrap-3.3.5-dist/css/bootstrap.css' rel='stylesheet' zip= https://github.com/twbs/bootstrap/releases/download/v3.3.5/bootstrap-3.3.5-dist.zip /  script src= ~/rusthon_cache/jquery-2.1.4.min.js  source= http://code.jquery.com/jquery-2.1.4.min.js /script  script src= ~/bootstrap-3.3.5-dist/js/bootstrap.min.js /script  script src= ~/rusthon_cache/angular.min.js  source= https://ajax.googleapis.com/ajax/libs/angularjs/1.3.9/angular.min.js /script  @myscript  /head  body  div ng-app= invoice1  ng-controller= InvoiceController as invoice \n   b Invoice: /b \n   div class= well \n    Quantity:  input type= number  min= 0  ng-model= invoice.qty  required  \n   /div \n   div class= well \n    Costs:  input type= number  min= 0  ng-model= invoice.cost  required  \n     select ng-model= invoice.inCurr \n       option ng-repeat= c in invoice.currencies {{c}} /option \n     /select \n   /div \n   div class= well \n     b Total: /b \n     span ng-repeat= c in invoice.currencies \n      {{invoice.total(c) | currency:c}}\n     /span \n     button class= btn  ng-click= invoice.pay() Pay /button \n   /div  /div  /body  /html   Above a special syntax is used  @myscript  this tells Rusthon where to insert the output of scripts it translates using the javascript backend.", 
            "title": "Angular.js Hello World"
        }, 
        {
            "location": "/hello_angular/#rusthon", 
            "text": "Below  @myscript  is given on the line just before the fenced rusthon code block.  This allows you to insert multiple scripts into your html, in the head or body.  @myscript  #backend:javascript\nfrom runtime import *\n\nmodule = angular.module('invoice1', [])\n\ndef invoice_controller():\n    this.qty = 1\n    this.cost = 2\n    this.inCurr = 'EUR'\n    this.currencies = ['USD', 'EUR', 'CNY']\n    this.usdToForeignRates = {\n        'USD': 1,\n        'EUR': 0.74,\n        'CNY': 6.09\n    }\n\n    def total(outCurr):\n        return this.convertCurrency(this.qty * this.cost, this.inCurr, outCurr)\n    def convertCurrency(amount, inCurr, outCurr):\n        return amount * this.usdToForeignRates[outCurr] / this.usdToForeignRates[inCurr]\n    def pay():\n        window.alert( Thanks! )\n\n    this.pay = pay\n    this.total = total\n    this.convertCurrency = convertCurrency\n\nmodule.controller('InvoiceController', invoice_controller)", 
            "title": "rusthon"
        }, 
        {
            "location": "/fullstack_nosql_onsql/", 
            "text": "FullStack Single File Example\n\n\nFullstack development includes: webserver, database, object relational mapping, javascript and html with css.\nThis example includes all of these in a single file, in less than 300 lines of code.\n\n\nDataset\n\n\nDataset is a database abstraction layer that makes using SQL dead simple.\n\n\nhttps://dataset.readthedocs.org/en/latest/\n\n\ngit clone git://github.com/pudo/dataset.git\ncd dataset/\nsudo python setup.py install\n\n\n\n\nTornado Server\n\n\nthe tornado webserver saves objects into the SQL database using Dataset.\n\n\n./rusthon.py ./examples/hello_fullstack.md --run=myserver.py\n\n\n\n\n@myserver.py\n\n\n#!/usr/bin/python\nimport dataset\nimport tornado\nimport tornado.ioloop\nimport tornado.web\nimport tornado.websocket\nimport os, sys, subprocess, datetime, json, time, mimetypes\n\nPORT = int(os.environ.get(\nPORT\n, 8000))\n\n## connect to database ##\n##db = dataset.connect('sqlite:///mydatabase.db')\ndb = dataset.connect('sqlite:///:memory:')\n\n# dataset will get or create `mytable`\ntable = db['mytable']\n\n\nclass MainHandler( tornado.web.RequestHandler ):\n\n    def get(self, path=None):\n        print('path', path)\n        guess = path\n        if not path or path == '/': guess = 'index.html'\n        mime_type, encoding = mimetypes.guess_type(guess)\n        if mime_type: self.set_header(\nContent-Type\n, mime_type)\n\n        if path == 'favicon.ico' or path.endswith('.map'):\n            self.write('')\n        elif path and '.' in path:\n            self.write( open(path).read() )\n        else:\n            self.write( open('index.html').read() )\n\n\nClients = []\n\nclass WebSocketHandler(tornado.websocket.WebSocketHandler):\n\n    def open(self):\n        print( 'websocket open' )\n        print( self.request.connection )\n        Clients.append( self )\n\n    def on_message(self, msg):\n        ob = json.loads( msg )\n        ## if a simple test string ##\n        if isinstance(ob, str):\n            print ob\n        elif isinstance(ob, list):\n            print 'doing database search'\n            results = []\n            for search in ob:\n                assert isinstance(search, dict)\n                ## `**search` unpacks to something like `name=\nfoo\n`\n                r = table.find_one( **search )\n                if r: results.append(r)\n            if results:\n                print results\n                self.write_message(json.dumps(results))\n            else:\n                self.write_message(json.dumps(\nnothing found in databases\n))\n\n        elif isinstance(ob, dict):\n            print 'saving object into database'\n            print ob\n            if len( list(table.find(id=ob['id'])) ):\n                table.update( ob, ['id'] )\n            else:\n                table.insert( ob )\n            self.write_message( json.dumps('updated database:'+str(ob)) )\n\n            for other in Clients:\n                if other is self: continue\n                print 'updating other client with new data'\n                other.write_message( msg )\n\n    def on_close(self):\n        print('websocket closed')\n        if self in Clients:\n            Clients.remove( self )\n        if self.ws_connection:\n            self.close()\n\n\n\n## Tornado Handlers ##\nHandlers = [\n    (r'/websocket', WebSocketHandler),\n    (r'/(.*)', MainHandler),  ## order is important, this comes last.\n]\n\nprint('\nstarting tornado server\n')\napp = tornado.web.Application(\n    Handlers,\n    #cookie_secret = 'some random text',\n    #login_url = '/login',\n    #xsrf_cookies = False,\n)\napp.listen( PORT )\ntornado.ioloop.IOLoop.instance().start()\n\n\n\n\n\nClient Side\n\n\nhttps://github.com/rusthon/Rusthon/wiki/JavaScript-DOM-Syntax\n\n\n@myapp\n\n\n#backend:javascript\nfrom runtime import *\n\nws = None\n\ndef on_open_ws():\n    print 'websocket open'\n    ws.send(JSON.stringify('hello server'))\n\ndef on_close_ws():\n    print 'websocket close'\n\ndef on_message_ws(event):\n    print 'on message', event\n    msg = None\n    if instanceof(event.data, ArrayBuffer):\n        print 'got binary bytes', event.data.byteLength\n        arr = new(Uint8Array(event.data))\n        txt = String.fromCharCode.apply(None, arr)\n        msg = JSON.parse(txt)\n    else:\n        msg = JSON.parse(event.data)\n\n    pre = document-\n('#RESULTS')\n    if isinstance(msg, list):\n        for res in msg:\n            s = JSON.stringify(res)\n            pre-\n(s+'\\n')\n    elif isinstance(msg, string):\n        pre-\n(msg+'\\n')\n    else:\n        proxy = man.instances[ msg.id ]\n        #a = { msg['key'] : msg['value'] }  ## TODO support this syntax\n        a = {}\n        a[ msg['key'] ] = msg['value']\n        proxy.restore( a )\n\n\ndef connect_ws():\n    global ws\n    addr = 'ws://' + location.host + '/websocket'\n    print 'websocket test connecting to:', addr\n    ws = new( WebSocket(addr) )\n    ws.binaryType = 'arraybuffer'\n    ws.onmessage = on_message_ws\n    ws.onopen = on_open_ws\n    ws.onclose = on_close_ws\n\n\nclass Proxy:\n    ids = 0\n    def __init__(self):\n        self.__id__ = Proxy.ids\n        Proxy.ids += 1\n        with \ud835\udd5a\ud835\udd5f\ud835\udd61\ud835\udd66\ud835\udd65 as \n%s=_=document.createElement('input');_.setAttribute('type','text');%s=0;\n:\n            \ud835\udd5a\ud835\udd5f\ud835\udd61\ud835\udd66\ud835\udd65( self._xe, self._x )\n            \ud835\udd5a\ud835\udd5f\ud835\udd61\ud835\udd66\ud835\udd65( self._ye, self._y )\n\n        @bind(self._xe.onkeyup, self)\n        def update_xe(e):\n            print 'update xe:' + self._xe.value\n            self.x = self._xe.value\n\n        @bind(self._ye.onkeyup, self)\n        def update_ye(e):\n            print 'update ye:' + self._ye.value\n            self.y = self._ye.value\n\n\n    def restore(self, restore):\n        for key in restore.keys():\n            self[ '_' + key ] = restore[key]\n            self[ '_' + key + 'e' ].value = restore[key]\n\n    def getwidget(self):\n        div = document.createElement('div')\n        with \ud835\udcd5 as \ndiv.appendChild(document.createTextNode(%s));div.appendChild(%s);div.appendChild(document.createElement('br'))\n:\n            \ud835\udcd5('some field X:', self._xe )\n            \ud835\udcd5('some field Y:', self._ye )\n        return div\n\n    @getter\n    def x(self):\n        return self._x\n    @setter\n    def x(self, v):\n        if v != self._x:\n            msg = {id:self.__id__, key:'x', value:v}\n            ws.send( JSON.stringify(msg) )\n            self._x = v\n            self._xe.value = v  ## updates widget\n\n    @getter\n    def y(self):\n        return self._y\n    @setter\n    def y(self, v):\n        if v != self._y:\n            msg = {id:self.__id__, key:'y', value:v}\n            ws.send( JSON.stringify(msg) )\n            self._y = v\n            self._ye.value = v  ## updates widget\n\nclass Manager:\n    def __init__(self):\n        self.instances = {}\n    def makeproxy(self):\n        p = new Proxy()\n        self.instances[p.__id__] = p\n        return p\n\n@debugger\ndef main():\n    global man, p\n    ## connect websocket\n    connect_ws()\n    man = Manager()\n    p = man.makeproxy()\n\n    document-\n('#FORM')-\n(\n        document-\n('h3')-\n('update database:'), \n        p.getwidget()\n    )\n\n\n\n\n\nHTML\n\n\n@index.html\n\n\nhtml\n\n\nhead\n\n\nlink href='~/bootstrap-3.3.5-dist/css/bootstrap.css' rel='stylesheet' zip=\nhttps://github.com/twbs/bootstrap/releases/download/v3.3.5/bootstrap-3.3.5-dist.zip\n/\n\n\nscript src=\n~/rusthon_cache/jquery-2.1.4.min.js\n source=\nhttp://code.jquery.com/jquery-2.1.4.min.js\n/script\n\n\nscript src=\n~/bootstrap-3.3.5-dist/js/bootstrap.min.js\n/script\n\n\n@myapp\n\n\n/head\n\n\nbody onload=\nmain()\n\n\ndiv id=\nFORM\n class=\nwell\n/div\n\n\npre id=\nRESULTS\n class=\nwell\n\n\n/pre\n\n\n/body\n\n\n/html", 
            "title": "FullWebStack"
        }, 
        {
            "location": "/fullstack_nosql_onsql/#fullstack-single-file-example", 
            "text": "Fullstack development includes: webserver, database, object relational mapping, javascript and html with css.\nThis example includes all of these in a single file, in less than 300 lines of code.", 
            "title": "FullStack Single File Example"
        }, 
        {
            "location": "/fullstack_nosql_onsql/#dataset", 
            "text": "Dataset is a database abstraction layer that makes using SQL dead simple.  https://dataset.readthedocs.org/en/latest/  git clone git://github.com/pudo/dataset.git\ncd dataset/\nsudo python setup.py install", 
            "title": "Dataset"
        }, 
        {
            "location": "/fullstack_nosql_onsql/#tornado-server", 
            "text": "the tornado webserver saves objects into the SQL database using Dataset.  ./rusthon.py ./examples/hello_fullstack.md --run=myserver.py  @myserver.py  #!/usr/bin/python\nimport dataset\nimport tornado\nimport tornado.ioloop\nimport tornado.web\nimport tornado.websocket\nimport os, sys, subprocess, datetime, json, time, mimetypes\n\nPORT = int(os.environ.get( PORT , 8000))\n\n## connect to database ##\n##db = dataset.connect('sqlite:///mydatabase.db')\ndb = dataset.connect('sqlite:///:memory:')\n\n# dataset will get or create `mytable`\ntable = db['mytable']\n\n\nclass MainHandler( tornado.web.RequestHandler ):\n\n    def get(self, path=None):\n        print('path', path)\n        guess = path\n        if not path or path == '/': guess = 'index.html'\n        mime_type, encoding = mimetypes.guess_type(guess)\n        if mime_type: self.set_header( Content-Type , mime_type)\n\n        if path == 'favicon.ico' or path.endswith('.map'):\n            self.write('')\n        elif path and '.' in path:\n            self.write( open(path).read() )\n        else:\n            self.write( open('index.html').read() )\n\n\nClients = []\n\nclass WebSocketHandler(tornado.websocket.WebSocketHandler):\n\n    def open(self):\n        print( 'websocket open' )\n        print( self.request.connection )\n        Clients.append( self )\n\n    def on_message(self, msg):\n        ob = json.loads( msg )\n        ## if a simple test string ##\n        if isinstance(ob, str):\n            print ob\n        elif isinstance(ob, list):\n            print 'doing database search'\n            results = []\n            for search in ob:\n                assert isinstance(search, dict)\n                ## `**search` unpacks to something like `name= foo `\n                r = table.find_one( **search )\n                if r: results.append(r)\n            if results:\n                print results\n                self.write_message(json.dumps(results))\n            else:\n                self.write_message(json.dumps( nothing found in databases ))\n\n        elif isinstance(ob, dict):\n            print 'saving object into database'\n            print ob\n            if len( list(table.find(id=ob['id'])) ):\n                table.update( ob, ['id'] )\n            else:\n                table.insert( ob )\n            self.write_message( json.dumps('updated database:'+str(ob)) )\n\n            for other in Clients:\n                if other is self: continue\n                print 'updating other client with new data'\n                other.write_message( msg )\n\n    def on_close(self):\n        print('websocket closed')\n        if self in Clients:\n            Clients.remove( self )\n        if self.ws_connection:\n            self.close()\n\n\n\n## Tornado Handlers ##\nHandlers = [\n    (r'/websocket', WebSocketHandler),\n    (r'/(.*)', MainHandler),  ## order is important, this comes last.\n]\n\nprint(' starting tornado server ')\napp = tornado.web.Application(\n    Handlers,\n    #cookie_secret = 'some random text',\n    #login_url = '/login',\n    #xsrf_cookies = False,\n)\napp.listen( PORT )\ntornado.ioloop.IOLoop.instance().start()", 
            "title": "Tornado Server"
        }, 
        {
            "location": "/fullstack_nosql_onsql/#client-side", 
            "text": "https://github.com/rusthon/Rusthon/wiki/JavaScript-DOM-Syntax  @myapp  #backend:javascript\nfrom runtime import *\n\nws = None\n\ndef on_open_ws():\n    print 'websocket open'\n    ws.send(JSON.stringify('hello server'))\n\ndef on_close_ws():\n    print 'websocket close'\n\ndef on_message_ws(event):\n    print 'on message', event\n    msg = None\n    if instanceof(event.data, ArrayBuffer):\n        print 'got binary bytes', event.data.byteLength\n        arr = new(Uint8Array(event.data))\n        txt = String.fromCharCode.apply(None, arr)\n        msg = JSON.parse(txt)\n    else:\n        msg = JSON.parse(event.data)\n\n    pre = document- ('#RESULTS')\n    if isinstance(msg, list):\n        for res in msg:\n            s = JSON.stringify(res)\n            pre- (s+'\\n')\n    elif isinstance(msg, string):\n        pre- (msg+'\\n')\n    else:\n        proxy = man.instances[ msg.id ]\n        #a = { msg['key'] : msg['value'] }  ## TODO support this syntax\n        a = {}\n        a[ msg['key'] ] = msg['value']\n        proxy.restore( a )\n\n\ndef connect_ws():\n    global ws\n    addr = 'ws://' + location.host + '/websocket'\n    print 'websocket test connecting to:', addr\n    ws = new( WebSocket(addr) )\n    ws.binaryType = 'arraybuffer'\n    ws.onmessage = on_message_ws\n    ws.onopen = on_open_ws\n    ws.onclose = on_close_ws\n\n\nclass Proxy:\n    ids = 0\n    def __init__(self):\n        self.__id__ = Proxy.ids\n        Proxy.ids += 1\n        with \ud835\udd5a\ud835\udd5f\ud835\udd61\ud835\udd66\ud835\udd65 as  %s=_=document.createElement('input');_.setAttribute('type','text');%s=0; :\n            \ud835\udd5a\ud835\udd5f\ud835\udd61\ud835\udd66\ud835\udd65( self._xe, self._x )\n            \ud835\udd5a\ud835\udd5f\ud835\udd61\ud835\udd66\ud835\udd65( self._ye, self._y )\n\n        @bind(self._xe.onkeyup, self)\n        def update_xe(e):\n            print 'update xe:' + self._xe.value\n            self.x = self._xe.value\n\n        @bind(self._ye.onkeyup, self)\n        def update_ye(e):\n            print 'update ye:' + self._ye.value\n            self.y = self._ye.value\n\n\n    def restore(self, restore):\n        for key in restore.keys():\n            self[ '_' + key ] = restore[key]\n            self[ '_' + key + 'e' ].value = restore[key]\n\n    def getwidget(self):\n        div = document.createElement('div')\n        with \ud835\udcd5 as  div.appendChild(document.createTextNode(%s));div.appendChild(%s);div.appendChild(document.createElement('br')) :\n            \ud835\udcd5('some field X:', self._xe )\n            \ud835\udcd5('some field Y:', self._ye )\n        return div\n\n    @getter\n    def x(self):\n        return self._x\n    @setter\n    def x(self, v):\n        if v != self._x:\n            msg = {id:self.__id__, key:'x', value:v}\n            ws.send( JSON.stringify(msg) )\n            self._x = v\n            self._xe.value = v  ## updates widget\n\n    @getter\n    def y(self):\n        return self._y\n    @setter\n    def y(self, v):\n        if v != self._y:\n            msg = {id:self.__id__, key:'y', value:v}\n            ws.send( JSON.stringify(msg) )\n            self._y = v\n            self._ye.value = v  ## updates widget\n\nclass Manager:\n    def __init__(self):\n        self.instances = {}\n    def makeproxy(self):\n        p = new Proxy()\n        self.instances[p.__id__] = p\n        return p\n\n@debugger\ndef main():\n    global man, p\n    ## connect websocket\n    connect_ws()\n    man = Manager()\n    p = man.makeproxy()\n\n    document- ('#FORM')- (\n        document- ('h3')- ('update database:'), \n        p.getwidget()\n    )", 
            "title": "Client Side"
        }, 
        {
            "location": "/fullstack_nosql_onsql/#html", 
            "text": "@index.html  html  head  link href='~/bootstrap-3.3.5-dist/css/bootstrap.css' rel='stylesheet' zip= https://github.com/twbs/bootstrap/releases/download/v3.3.5/bootstrap-3.3.5-dist.zip /  script src= ~/rusthon_cache/jquery-2.1.4.min.js  source= http://code.jquery.com/jquery-2.1.4.min.js /script  script src= ~/bootstrap-3.3.5-dist/js/bootstrap.min.js /script  @myapp  /head  body onload= main()  div id= FORM  class= well /div  pre id= RESULTS  class= well  /pre  /body  /html", 
            "title": "HTML"
        }, 
        {
            "location": "/example-project/", 
            "text": "Multilanguage Markdown Containers\n\n\npythia.py can be given a markdown file \n.md\n and code blocks will be extracted and compiled.\nThis is inspired by CoffeeScript literate format, http://coffeescript.org/#literate\n\n\nFenced code blocks with the syntax highlight tag are used to translate and build the project,\nthe supported languages are: \npythia\n, \nc++\n, \nrust\n, \njavascript\n, \npython\n\nCode blocks tagged as \njavascript\n or \npython\n are saved to the output tar file.\nFenced code blocks without a syntax highlight tag are ignored.\n\n\nc++ example\n\n\nthe function below \nsay_hi_cpp\n can be directly called from the pythia code below,\nbecause the default backend for pythia is c++.\n\n\n@embed:mybin\n\n\n#include \nfstream\n\n#include \niostream\n\n#include \nstring\n\nvoid say_hi_cpp() {\n    std::cout \n std::string(\nhello world from c++\n) \n std::endl;\n}\n\n\n\n\npythia script\n\n\nThe code below is translated to C++ and merged with the hand written C++ code above.\n\n\n@mybin\n\n\ndef say_hi():\n    print( 'hello world')\n\ndef main():\n    say_hi()\n    say_hi_cpp()\n\n\n\n\npython2 script\n\n\nprint('cpython script')\n\n\n\n\njavascript\n\n\nwindow.alert('hi');\n\n\n\n\ngo\n\n\nThis hand written Go code is callable from the pythia code below.\n\n\n@embed:mygobin\n\n\nfunc my_go_func() {\n    fmt.Println(\nhello world from Go.\n)\n}\nfunc call_pythia_func_from_go() {\n    my_pythia_func()\n}\n\n\n\n\npythia go backend\n\n\nThe backend is selected by the special comment on the first line of the script,\nbelow the Go backend is set by \n#backend:go\n.\nWhen using the Go backend, hand written Go code can be called directly,\nthe call below \nmy_go_func\n is defined above.\n\n\n@mygobin\n\n\n#backend:go\n\ndef my_pythia_func():\n    print('my pythia func called from go')\n\ndef main():\n    print('hello from pythia go backend')\n    my_go_func()\n    call_pythia_func_from_go()", 
            "title": "MultilangExample"
        }, 
        {
            "location": "/example-project/#multilanguage-markdown-containers", 
            "text": "pythia.py can be given a markdown file  .md  and code blocks will be extracted and compiled.\nThis is inspired by CoffeeScript literate format, http://coffeescript.org/#literate  Fenced code blocks with the syntax highlight tag are used to translate and build the project,\nthe supported languages are:  pythia ,  c++ ,  rust ,  javascript ,  python \nCode blocks tagged as  javascript  or  python  are saved to the output tar file.\nFenced code blocks without a syntax highlight tag are ignored.", 
            "title": "Multilanguage Markdown Containers"
        }, 
        {
            "location": "/example-project/#c-example", 
            "text": "the function below  say_hi_cpp  can be directly called from the pythia code below,\nbecause the default backend for pythia is c++.  @embed:mybin  #include  fstream \n#include  iostream \n#include  string \nvoid say_hi_cpp() {\n    std::cout   std::string( hello world from c++ )   std::endl;\n}", 
            "title": "c++ example"
        }, 
        {
            "location": "/example-project/#pythia-script", 
            "text": "The code below is translated to C++ and merged with the hand written C++ code above.  @mybin  def say_hi():\n    print( 'hello world')\n\ndef main():\n    say_hi()\n    say_hi_cpp()", 
            "title": "pythia script"
        }, 
        {
            "location": "/example-project/#python2-script", 
            "text": "print('cpython script')", 
            "title": "python2 script"
        }, 
        {
            "location": "/example-project/#javascript", 
            "text": "window.alert('hi');", 
            "title": "javascript"
        }, 
        {
            "location": "/example-project/#go", 
            "text": "This hand written Go code is callable from the pythia code below.  @embed:mygobin  func my_go_func() {\n    fmt.Println( hello world from Go. )\n}\nfunc call_pythia_func_from_go() {\n    my_pythia_func()\n}", 
            "title": "go"
        }, 
        {
            "location": "/example-project/#pythia-go-backend", 
            "text": "The backend is selected by the special comment on the first line of the script,\nbelow the Go backend is set by  #backend:go .\nWhen using the Go backend, hand written Go code can be called directly,\nthe call below  my_go_func  is defined above.  @mygobin  #backend:go\n\ndef my_pythia_func():\n    print('my pythia func called from go')\n\ndef main():\n    print('hello from pythia go backend')\n    my_go_func()\n    call_pythia_func_from_go()", 
            "title": "pythia go backend"
        }, 
        {
            "location": "/cpython_embed/", 
            "text": "Embed CPython Script\n\n\nTo run in OSv\n\n\ncd pythia/examples\npythia cpython_embed.md --osv\n\n\n\n\nThe script below is marked with \n@embed\n which turns it into a static string in the final C++,\nand is run after \ncpython.initalize()\n is called.\n\n\n@/myfolder/somefile.json\n\n\nmy-data\n\n\n\n\n@embed\n\n\n\nclass A():\n    def __init__(self):\n        self.value = 100\n    def pymethod(self):\n        print 'from cpython: self.value=', self.value\n        if hasattr(self, 'my_dynamic_var'):\n            print self.my_dynamic_var\n\n    def add(self, a,b):\n        return a+b\n\ndef foo():\n    print 'foo'\n    print open('myfolder/somefile.json', 'r').read()\n    return A()\n\n\n\n\n\nOSv image manifest\n\n\nBelow is the minimal set of files required to run Python.\n\n\n@usr.manifest\n\n\n/usr/lib/python2.7/site.py: /usr/lib/python2.7/site.py\n/usr/lib/python2.7/os.py: /usr/lib/python2.7/os.py\n/usr/lib/python2.7/posixpath.py: /usr/lib/python2.7/posixpath.py\n/usr/lib/python2.7/stat.py: /usr/lib/python2.7/stat.py\n/usr/lib/python2.7/genericpath.py: /usr/lib/python2.7/genericpath.py\n/usr/lib/python2.7/warnings.py: /usr/lib/python2.7/warnings.py\n/usr/lib/python2.7/linecache.py: /usr/lib/python2.7/linecache.py\n/usr/lib/python2.7/types.py: /usr/lib/python2.7/types.py\n/usr/lib/python2.7/UserDict.py: /usr/lib/python2.7/UserDict.py\n/usr/lib/python2.7/_abcoll.py: /usr/lib/python2.7/_abcoll.py\n/usr/lib/python2.7/abc.py: /usr/lib/python2.7/abc.py\n/usr/lib/python2.7/_weakrefset.py: /usr/lib/python2.7/_weakrefset.py\n/usr/lib/python2.7/copy_reg.py: /usr/lib/python2.7/copy_reg.py\n/usr/lib/python2.7/traceback.py: /usr/lib/python2.7/traceback.py\n/usr/lib/python2.7/sysconfig.py: /usr/lib/python2.7/sysconfig.py\n/usr/lib/python2.7/re.py: /usr/lib/python2.7/re.py\n/usr/lib/python2.7/sre_compile.py: /usr/lib/python2.7/sre_compile.py\n/usr/lib/python2.7/sre_parse.py: /usr/lib/python2.7/sre_parse.py\n/usr/lib/python2.7/sre_constants.py: /usr/lib/python2.7/sre_constants.py\n/usr/lib/python2.7/_sysconfigdata.py: /usr/lib/python2.7/_sysconfigdata.py\n/usr/lib/python2.7/plat-x86_64-linux-gnu/_sysconfigdata_nd.py: /usr/lib/python2.7/plat-x86_64-linux-gnu/_sysconfigdata_nd.py\n\n\n\n\nCPython CAPI\n\n\nThe code below shows how to use the \ncpython\n module that wraps around the CPython C-API.\nhttps://docs.python.org/2/c-api/object.html\n\n\nBelow \na.value as int\n it is trival to know that \na\n is a PyObject and that using the \n.\n operator\non it makes Pythia generate the code that calls the CPython C-API.\nTranslation to C++:\n\n\nauto v = static_cast\nint\n(PyInt_AS_LONG(PyObject_GetAttrString(a,\nvalue\n)));\n\n\n\n\nThe syntax is used \n-\n to make it explicit that the object is a PyObject,\nand to make Pythia generate the required CPython C-API calls.\n\nFor example \nb-\npymethod()\n becomes this C++:\n\n\nPyObject_Call(\n    PyObject_GetAttrString(b,\npymethod\n),\n    Py_BuildValue(\n()\n),\n    NULL\n);\n\n\n\n\nBuild Options\n\n\n\n\n@link:python2.7\n\n\n@include:/usr/include/python2.7\n\n\n\n\n#backend:c++\nimport cpython\n\ndef main():\n    print readfile( open('myfolder/somefile.json','r'))\n    print 'init cpython...'\n    state = cpython.initalize()\n    with gil:\n        a = cpython.foo()\n        print 'addr of a:', a\n        print a..value as int\n        a..pymethod()\n\n        b = a\n        b..pymethod()\n        print b..value as int\n        v = b..value as int\n        print v + 400\n        c = b..pymethod()\n\n        r = b..add(1, 2) as int\n        print r\n        u = b..add(\n            b..value, \n            b..value \n        ) as int\n        print u\n\n        if hasattr(b, \nvalue\n):\n            print('builtin `hasattr` works on b')\n            print str(b)\n            b..value = 'set from c++' as pystring\n            b..pymethod()\n            b..my_dynamic_var = 'hello dynamic var' as pystring\n            a..pymethod()\n            setattr(a, 'my_dynamic_var', 'setattr OK' as pystring)\n            a..pymethod()\n\n            s = b..my_dynamic_var as string\n            print s\n\n        pyob = cpython.foo()\n        b..my_dynamic_var = pyob\n        b..pymethod()\n\n    cpython.finalize(state)", 
            "title": "MixingPython2"
        }, 
        {
            "location": "/cpython_embed/#embed-cpython-script", 
            "text": "To run in OSv  cd pythia/examples\npythia cpython_embed.md --osv  The script below is marked with  @embed  which turns it into a static string in the final C++,\nand is run after  cpython.initalize()  is called.  @/myfolder/somefile.json  my-data  @embed  \nclass A():\n    def __init__(self):\n        self.value = 100\n    def pymethod(self):\n        print 'from cpython: self.value=', self.value\n        if hasattr(self, 'my_dynamic_var'):\n            print self.my_dynamic_var\n\n    def add(self, a,b):\n        return a+b\n\ndef foo():\n    print 'foo'\n    print open('myfolder/somefile.json', 'r').read()\n    return A()", 
            "title": "Embed CPython Script"
        }, 
        {
            "location": "/cpython_embed/#osv-image-manifest", 
            "text": "Below is the minimal set of files required to run Python.  @usr.manifest  /usr/lib/python2.7/site.py: /usr/lib/python2.7/site.py\n/usr/lib/python2.7/os.py: /usr/lib/python2.7/os.py\n/usr/lib/python2.7/posixpath.py: /usr/lib/python2.7/posixpath.py\n/usr/lib/python2.7/stat.py: /usr/lib/python2.7/stat.py\n/usr/lib/python2.7/genericpath.py: /usr/lib/python2.7/genericpath.py\n/usr/lib/python2.7/warnings.py: /usr/lib/python2.7/warnings.py\n/usr/lib/python2.7/linecache.py: /usr/lib/python2.7/linecache.py\n/usr/lib/python2.7/types.py: /usr/lib/python2.7/types.py\n/usr/lib/python2.7/UserDict.py: /usr/lib/python2.7/UserDict.py\n/usr/lib/python2.7/_abcoll.py: /usr/lib/python2.7/_abcoll.py\n/usr/lib/python2.7/abc.py: /usr/lib/python2.7/abc.py\n/usr/lib/python2.7/_weakrefset.py: /usr/lib/python2.7/_weakrefset.py\n/usr/lib/python2.7/copy_reg.py: /usr/lib/python2.7/copy_reg.py\n/usr/lib/python2.7/traceback.py: /usr/lib/python2.7/traceback.py\n/usr/lib/python2.7/sysconfig.py: /usr/lib/python2.7/sysconfig.py\n/usr/lib/python2.7/re.py: /usr/lib/python2.7/re.py\n/usr/lib/python2.7/sre_compile.py: /usr/lib/python2.7/sre_compile.py\n/usr/lib/python2.7/sre_parse.py: /usr/lib/python2.7/sre_parse.py\n/usr/lib/python2.7/sre_constants.py: /usr/lib/python2.7/sre_constants.py\n/usr/lib/python2.7/_sysconfigdata.py: /usr/lib/python2.7/_sysconfigdata.py\n/usr/lib/python2.7/plat-x86_64-linux-gnu/_sysconfigdata_nd.py: /usr/lib/python2.7/plat-x86_64-linux-gnu/_sysconfigdata_nd.py", 
            "title": "OSv image manifest"
        }, 
        {
            "location": "/cpython_embed/#cpython-capi", 
            "text": "The code below shows how to use the  cpython  module that wraps around the CPython C-API.\nhttps://docs.python.org/2/c-api/object.html  Below  a.value as int  it is trival to know that  a  is a PyObject and that using the  .  operator\non it makes Pythia generate the code that calls the CPython C-API.\nTranslation to C++:  auto v = static_cast int (PyInt_AS_LONG(PyObject_GetAttrString(a, value )));  The syntax is used  -  to make it explicit that the object is a PyObject,\nand to make Pythia generate the required CPython C-API calls. \nFor example  b- pymethod()  becomes this C++:  PyObject_Call(\n    PyObject_GetAttrString(b, pymethod ),\n    Py_BuildValue( () ),\n    NULL\n);", 
            "title": "CPython CAPI"
        }, 
        {
            "location": "/cpython_embed/#build-options", 
            "text": "@link:python2.7  @include:/usr/include/python2.7   #backend:c++\nimport cpython\n\ndef main():\n    print readfile( open('myfolder/somefile.json','r'))\n    print 'init cpython...'\n    state = cpython.initalize()\n    with gil:\n        a = cpython.foo()\n        print 'addr of a:', a\n        print a..value as int\n        a..pymethod()\n\n        b = a\n        b..pymethod()\n        print b..value as int\n        v = b..value as int\n        print v + 400\n        c = b..pymethod()\n\n        r = b..add(1, 2) as int\n        print r\n        u = b..add(\n            b..value, \n            b..value \n        ) as int\n        print u\n\n        if hasattr(b,  value ):\n            print('builtin `hasattr` works on b')\n            print str(b)\n            b..value = 'set from c++' as pystring\n            b..pymethod()\n            b..my_dynamic_var = 'hello dynamic var' as pystring\n            a..pymethod()\n            setattr(a, 'my_dynamic_var', 'setattr OK' as pystring)\n            a..pymethod()\n\n            s = b..my_dynamic_var as string\n            print s\n\n        pyob = cpython.foo()\n        b..my_dynamic_var = pyob\n        b..pymethod()\n\n    cpython.finalize(state)", 
            "title": "Build Options"
        }, 
        {
            "location": "/cython_mandelbrot/", 
            "text": "Cython Hello World\n\n\n@embed\n\n\nimport os, sys\nsys.path.append( os.path.curdir )  ## TODO this should not be required to import the cython module\nimport mycython_module as cymod\n\ndef run_test():\n    cymod.calc_mandelbrot(64, sys.stdout)\n\n\n\n\n\n@mycython_module\n\n\n# The Computer Language Benchmarks Game\n# http://shootout.alioth.debian.org/\n#\n# contributed by Robert Bradshaw\n\nimport sys\n\ndef calc_mandelbrot(int size, outfile=sys.stdout):\n\n    cdef int i, x, y\n    cdef double step = 2.0 / size\n    cdef double Cx, Cy, Zx, Zy, Tx, Ty\n\n    cdef line = ' ' * ((size+7) // 8)\n    cdef char *buf = line\n    cdef unsigned char byte_acc\n\n    write = outfile.write\n    write(\nP4\\n%s %s\\n\n % (size, size))\n\n    for y in range(size):\n\n        byte_acc = 0\n\n        for x in range(size):\n\n            i = 50\n            Zx = Cx = step*x - 1.5\n            Zy = Cy = step*y - 1.0\n\n            Tx = Zx * Zx\n            Ty = Zy * Zy\n            while True:\n                # Z = Z^2 + C\n                Zx, Zy = Tx - Ty + Cx, Zx * Zy + Zx * Zy + Cy\n                Tx = Zx * Zx\n                Ty = Zy * Zy\n                i -= 1\n                if (i == 0) | (Tx + Ty \n 4.0):\n                    break\n\n            byte_acc = (byte_acc \n 1) | (i == 0)\n            if x \n 7 == 7:\n                buf[x \n 3] = byte_acc\n\n        if size \n 7 != 0:\n            # line ending on non-byte boundary\n            byte_acc \n= 8 - (size \n 7)\n            buf[size \n 3] = byte_acc\n        write(line)\n\n\n\n\n\n\nBuild Options\n\n\n\n\n@link:python2.7\n\n\n@include:/usr/include/python2.7\n@myexe\n\n\n\n\n#backend:c++\nimport cpython\n\ndef main():\n    print 'init CPython...'\n    state = cpython.initalize()\n    with gil:\n        cpython.run_test()\n    cpython.finalize(state)\n    print 'OK'", 
            "title": "MixingCython"
        }, 
        {
            "location": "/cython_mandelbrot/#cython-hello-world", 
            "text": "@embed  import os, sys\nsys.path.append( os.path.curdir )  ## TODO this should not be required to import the cython module\nimport mycython_module as cymod\n\ndef run_test():\n    cymod.calc_mandelbrot(64, sys.stdout)  @mycython_module  # The Computer Language Benchmarks Game\n# http://shootout.alioth.debian.org/\n#\n# contributed by Robert Bradshaw\n\nimport sys\n\ndef calc_mandelbrot(int size, outfile=sys.stdout):\n\n    cdef int i, x, y\n    cdef double step = 2.0 / size\n    cdef double Cx, Cy, Zx, Zy, Tx, Ty\n\n    cdef line = ' ' * ((size+7) // 8)\n    cdef char *buf = line\n    cdef unsigned char byte_acc\n\n    write = outfile.write\n    write( P4\\n%s %s\\n  % (size, size))\n\n    for y in range(size):\n\n        byte_acc = 0\n\n        for x in range(size):\n\n            i = 50\n            Zx = Cx = step*x - 1.5\n            Zy = Cy = step*y - 1.0\n\n            Tx = Zx * Zx\n            Ty = Zy * Zy\n            while True:\n                # Z = Z^2 + C\n                Zx, Zy = Tx - Ty + Cx, Zx * Zy + Zx * Zy + Cy\n                Tx = Zx * Zx\n                Ty = Zy * Zy\n                i -= 1\n                if (i == 0) | (Tx + Ty   4.0):\n                    break\n\n            byte_acc = (byte_acc   1) | (i == 0)\n            if x   7 == 7:\n                buf[x   3] = byte_acc\n\n        if size   7 != 0:\n            # line ending on non-byte boundary\n            byte_acc  = 8 - (size   7)\n            buf[size   3] = byte_acc\n        write(line)", 
            "title": "Cython Hello World"
        }, 
        {
            "location": "/cython_mandelbrot/#build-options", 
            "text": "@link:python2.7  @include:/usr/include/python2.7\n@myexe   #backend:c++\nimport cpython\n\ndef main():\n    print 'init CPython...'\n    state = cpython.initalize()\n    with gil:\n        cpython.run_test()\n    cpython.finalize(state)\n    print 'OK'", 
            "title": "Build Options"
        }, 
        {
            "location": "/nim_threadpool/", 
            "text": "Nim ThreadPool and Parallel\n\n\nimport threadpool\n{.experimental.}\n\ntype\n    IntSeq = seq[int]\n\nproc calc_something(x:int, y:int): IntSeq =\n    result = @[x,y,x+y]\n\nproc start_nim_threadpool( a:cint, b:cint ): cint {.cdecl, exportc.} =\n    var r: FlowVar[ IntSeq ]\n    echo(\na:\n, a)\n    echo(\nb:\n, b)\n    parallel:\n        r = spawn calc_something( int(a), int(b) )\n    return cast[cint]((^r)[2])\n\n\n\n\n\nRun ThreadPool\n\n\n#backend:c++\nimport nim\n\ndef main():\n    nim.main()\n    print 'starting nim threadpool'\n    msg = start_nim_threadpool( 10, 20 )\n    print msg\n    print 'ok'", 
            "title": "Nimlang"
        }, 
        {
            "location": "/nim_threadpool/#nim-threadpool-and-parallel", 
            "text": "import threadpool\n{.experimental.}\n\ntype\n    IntSeq = seq[int]\n\nproc calc_something(x:int, y:int): IntSeq =\n    result = @[x,y,x+y]\n\nproc start_nim_threadpool( a:cint, b:cint ): cint {.cdecl, exportc.} =\n    var r: FlowVar[ IntSeq ]\n    echo( a: , a)\n    echo( b: , b)\n    parallel:\n        r = spawn calc_something( int(a), int(b) )\n    return cast[cint]((^r)[2])", 
            "title": "Nim ThreadPool and Parallel"
        }, 
        {
            "location": "/nim_threadpool/#run-threadpool", 
            "text": "#backend:c++\nimport nim\n\ndef main():\n    nim.main()\n    print 'starting nim threadpool'\n    msg = start_nim_threadpool( 10, 20 )\n    print msg\n    print 'ok'", 
            "title": "Run ThreadPool"
        }, 
        {
            "location": "/hello_rapydscript/", 
            "text": "testing\n\n\nTo run this example run these commands in your shell:\n\n\ncd\ngit clone https://github.com/rusthon/Rusthon.git\ncd Rusthon/\n./rusthon.py ./examples/hello_rapydscript.md\n\n\n\n\nhtml\n\n\n@index.html\n\n\nhtml\n\n\nhead\n\n\n\n@my_rapydscript.js\n\n\n@my_rusthon_script.js\n\n\n\n/head\n\n\nbody\n\n\nbutton onclick=\njavascript:hi_from_rapyd()\nclickme\n/button\n\n\n\n/body\n\n\n/html\n\n\n\n\n\nrapydscript\n\n\nYou need to install RapydScript for this to work.\nhttp://www.rapydscript.com/\n\n\nTest calling Rusthon translated JS from RapydScript.\n\n\n@my_rapydscript.js\n\n\n\n## note unicode is broken in rapydscript\n#\ud835\udc6d\ud835\udc76\ud835\udc76\ud835\udc83\ud835\udc82\ud835\udc93 = 'UNICODE_OK'\n\ndef hi_from_rapyd():\n    window.alert('hey rapydscript!')\n    a = [1,2,3]\n    hi_from_rusthon(a)\n\n\n\n\n\nrusthon javascript backend\n\n\n@my_rusthon_script.js\n\n\n#backend:javascript\nfrom runtime import *\n\ndef hi_from_rusthon(v):\n    assert inline('\ud835\udc6d\ud835\udc76\ud835\udc76\ud835\udc83\ud835\udc82\ud835\udc93') == 'UNICODE_OK'\n    assert len(v) == 3\n    assert v[0] == 1\n    for x in v:\n        print(x)", 
            "title": "Rapydscript"
        }, 
        {
            "location": "/hello_rapydscript/#testing", 
            "text": "To run this example run these commands in your shell:  cd\ngit clone https://github.com/rusthon/Rusthon.git\ncd Rusthon/\n./rusthon.py ./examples/hello_rapydscript.md", 
            "title": "testing"
        }, 
        {
            "location": "/hello_rapydscript/#html", 
            "text": "@index.html  html  head  @my_rapydscript.js  @my_rusthon_script.js  /head  body  button onclick= javascript:hi_from_rapyd() clickme /button  /body  /html", 
            "title": "html"
        }, 
        {
            "location": "/hello_rapydscript/#rapydscript", 
            "text": "You need to install RapydScript for this to work.\nhttp://www.rapydscript.com/  Test calling Rusthon translated JS from RapydScript.  @my_rapydscript.js  \n## note unicode is broken in rapydscript\n#\ud835\udc6d\ud835\udc76\ud835\udc76\ud835\udc83\ud835\udc82\ud835\udc93 = 'UNICODE_OK'\n\ndef hi_from_rapyd():\n    window.alert('hey rapydscript!')\n    a = [1,2,3]\n    hi_from_rusthon(a)", 
            "title": "rapydscript"
        }, 
        {
            "location": "/hello_rapydscript/#rusthon-javascript-backend", 
            "text": "@my_rusthon_script.js  #backend:javascript\nfrom runtime import *\n\ndef hi_from_rusthon(v):\n    assert inline('\ud835\udc6d\ud835\udc76\ud835\udc76\ud835\udc83\ud835\udc82\ud835\udc93') == 'UNICODE_OK'\n    assert len(v) == 3\n    assert v[0] == 1\n    for x in v:\n        print(x)", 
            "title": "rusthon javascript backend"
        }, 
        {
            "location": "/hello_threejs/", 
            "text": "html\n\n\nTo run this example run these commands in your shell:\n\n\ncd\ngit clone https://github.com/mrdoob/three.js.git\ngit clone https://github.com/rusthon/Rusthon.git\ncd Rusthon/\n./rusthon.py ./examples/hello_threejs.md\n\n\n\n\nThis will compile, and then open a web-browser, clicking \"click me\" will start the threejs scene, and you should see some 3D objects rotating.\n\n\nRusthon allows you to assemble html files, inserting static javascripts, and output from Rusthon using the javascript backend.\nThe example below inserts the pythonjs runtime \nfrom runtime import *\n and the THREE.js library \nthree.min.js\n into the output html file.\nThis is triggered by using \n~/\n at the start of the path in the \nsrc\n attribute of the script tag.  The path is relative to your home directory.\n\n\nhtml\n\n\nhead\n\n\nscript src=\n~/three.js/build/three.min.js\n git=\nhttps://github.com/mrdoob/three.js.git\n/script\n\n\n@myscript\n\n\n\n/head\n\n\nbody\n\n\nbutton onclick=\nmain()\nclick me\n/button\n\n\n/body\n\n\n/html\n\n\n\n\n\nAbove a special syntax is used \n@myscript\n this tells Rusthon where to insert the output of scripts it translates using the javascript backend.\n\n\nrusthon\n\n\nBelow \n@myscript\n is given on the line just before the fenced rusthon code block.  This allows you to insert multiple scripts into your html, in the head or body.\n\n\n@myscript\n\n\n#backend:javascript\nfrom runtime import *\n\nMeshes = []\nren = None\nscn = None\ncam = None\n\ndef main():\n    global ren, scn, cam\n\n    div = document.createElement( 'div' )\n    document.body.appendChild(div)\n    print(div)\n\n    width = 640; height = 320\n    scn = new( THREE.Scene() )\n    print(scn)\n    cam = new( THREE.PerspectiveCamera( 45, width/height, 0.01, 10000) )\n    print(cam)\n    cam.position.z = 60\n    cam.position.x = 5\n\n    ren = new( THREE.WebGLRenderer() )\n    print(ren)\n    ren.setSize( width, height )\n\n    div.appendChild( ren.domElement )\n\n    light = new( THREE.PointLight() )\n    light.position.set( 0, 100, 90 )\n    scn.add( light )\n    print(light)\n\n    radius = 4; segments = 32\n    geo = new( THREE.CircleGeometry( radius, segments ) )\n    mat = new( THREE.MeshBasicMaterial() )\n    mesh = new( THREE.Mesh( geo, mat ) )\n    mesh.position.x = -30\n    scn.add( mesh )\n    Meshes.append( mesh )\n\n    radiusTop=3; radiusBottom=6; height=10\n    geo = new( THREE.CylinderGeometry( radiusTop, radiusBottom, height ) )\n    mat = new( THREE.MeshPhongMaterial() )\n    mesh = new( THREE.Mesh( geo, mat ) )\n    mesh.position.x = -15\n    scn.add( mesh )\n    Meshes.append( mesh )\n\n    radius=4.0; detail=1\n    geo = new( THREE.IcosahedronGeometry( radius, detail ) )\n    mat = new( THREE.MeshPhongMaterial() )\n    mesh = new( THREE.Mesh( geo, mat ) )\n    mesh.position.x = 0\n    scn.add( mesh )\n    Meshes.append( mesh )\n\n    geo = new( THREE.OctahedronGeometry( radius, detail ) )\n    mat = new( THREE.MeshPhongMaterial() )\n    mesh = new( THREE.Mesh( geo, mat ) )\n    mesh.position.x = 15\n    scn.add( mesh )\n    Meshes.append( mesh )\n\n    print('OK')\n    animate()\n\ndef animate():\n    requestAnimationFrame( animate )\n    for m in Meshes:\n        m.rotation.x = m.rotation.x + 0.01\n        m.rotation.y = m.rotation.y + 0.02\n        x = m.quaternion.x\n        y = m.quaternion.y\n        z = m.quaternion.z\n        m.material.color.setRGB( x,y,z )\n\n    ren.render( scn, cam )", 
            "title": "ThreeJS"
        }, 
        {
            "location": "/hello_threejs/#html", 
            "text": "To run this example run these commands in your shell:  cd\ngit clone https://github.com/mrdoob/three.js.git\ngit clone https://github.com/rusthon/Rusthon.git\ncd Rusthon/\n./rusthon.py ./examples/hello_threejs.md  This will compile, and then open a web-browser, clicking \"click me\" will start the threejs scene, and you should see some 3D objects rotating.  Rusthon allows you to assemble html files, inserting static javascripts, and output from Rusthon using the javascript backend.\nThe example below inserts the pythonjs runtime  from runtime import *  and the THREE.js library  three.min.js  into the output html file.\nThis is triggered by using  ~/  at the start of the path in the  src  attribute of the script tag.  The path is relative to your home directory.  html  head  script src= ~/three.js/build/three.min.js  git= https://github.com/mrdoob/three.js.git /script  @myscript  /head  body  button onclick= main() click me /button  /body  /html   Above a special syntax is used  @myscript  this tells Rusthon where to insert the output of scripts it translates using the javascript backend.", 
            "title": "html"
        }, 
        {
            "location": "/hello_threejs/#rusthon", 
            "text": "Below  @myscript  is given on the line just before the fenced rusthon code block.  This allows you to insert multiple scripts into your html, in the head or body.  @myscript  #backend:javascript\nfrom runtime import *\n\nMeshes = []\nren = None\nscn = None\ncam = None\n\ndef main():\n    global ren, scn, cam\n\n    div = document.createElement( 'div' )\n    document.body.appendChild(div)\n    print(div)\n\n    width = 640; height = 320\n    scn = new( THREE.Scene() )\n    print(scn)\n    cam = new( THREE.PerspectiveCamera( 45, width/height, 0.01, 10000) )\n    print(cam)\n    cam.position.z = 60\n    cam.position.x = 5\n\n    ren = new( THREE.WebGLRenderer() )\n    print(ren)\n    ren.setSize( width, height )\n\n    div.appendChild( ren.domElement )\n\n    light = new( THREE.PointLight() )\n    light.position.set( 0, 100, 90 )\n    scn.add( light )\n    print(light)\n\n    radius = 4; segments = 32\n    geo = new( THREE.CircleGeometry( radius, segments ) )\n    mat = new( THREE.MeshBasicMaterial() )\n    mesh = new( THREE.Mesh( geo, mat ) )\n    mesh.position.x = -30\n    scn.add( mesh )\n    Meshes.append( mesh )\n\n    radiusTop=3; radiusBottom=6; height=10\n    geo = new( THREE.CylinderGeometry( radiusTop, radiusBottom, height ) )\n    mat = new( THREE.MeshPhongMaterial() )\n    mesh = new( THREE.Mesh( geo, mat ) )\n    mesh.position.x = -15\n    scn.add( mesh )\n    Meshes.append( mesh )\n\n    radius=4.0; detail=1\n    geo = new( THREE.IcosahedronGeometry( radius, detail ) )\n    mat = new( THREE.MeshPhongMaterial() )\n    mesh = new( THREE.Mesh( geo, mat ) )\n    mesh.position.x = 0\n    scn.add( mesh )\n    Meshes.append( mesh )\n\n    geo = new( THREE.OctahedronGeometry( radius, detail ) )\n    mat = new( THREE.MeshPhongMaterial() )\n    mesh = new( THREE.Mesh( geo, mat ) )\n    mesh.position.x = 15\n    scn.add( mesh )\n    Meshes.append( mesh )\n\n    print('OK')\n    animate()\n\ndef animate():\n    requestAnimationFrame( animate )\n    for m in Meshes:\n        m.rotation.x = m.rotation.x + 0.01\n        m.rotation.y = m.rotation.y + 0.02\n        x = m.quaternion.x\n        y = m.quaternion.y\n        z = m.quaternion.z\n        m.material.color.setRGB( x,y,z )\n\n    ren.render( scn, cam )", 
            "title": "rusthon"
        }, 
        {
            "location": "/hello_java/", 
            "text": "Java Frontend with Java2Rusthon\n\n\nRequires:\n\n https://github.com/rusthon/java2python\n\n Antlr 3.1.3 for Python2\n\n\n@install-script.sh\n\n\ncd\ngit clone https://github.com/rusthon/java2python.git\ncd java2python\nsudo python setup.py install\ncd\nwget http://www.antlr3.org/download/antlr-3.1.3.tar.gz\ntar xfz antlr-3.1.3.tar.gz\ncd antlr-3.1.3/runtime/Python/\nsudo python setup.py install\n\n\n\n\nJava\n\n\nSome hand written Java source code, auto converted to Rusthon's syntax,\nand merged with below.\n@java2rusthon\n\n\n\npublic class HelloWorld {\n    public static void test() {\n        System.out.println(\nHello, World test\n);\n    }\n\n    public static void foo(String msg) {\n        System.out.println(msg);\n    }\n\n}\n\n\n\n\nRusthon\n\n\nThe above Java code is converted to Rusthon, and merged with this code.\n\n\n#backend:c++\n\ndef main():\n    HelloWorld.test()\n    HelloWorld.foo(\nhi java\n)", 
            "title": "Java"
        }, 
        {
            "location": "/hello_java/#java-frontend-with-java2rusthon", 
            "text": "Requires:  https://github.com/rusthon/java2python  Antlr 3.1.3 for Python2  @install-script.sh  cd\ngit clone https://github.com/rusthon/java2python.git\ncd java2python\nsudo python setup.py install\ncd\nwget http://www.antlr3.org/download/antlr-3.1.3.tar.gz\ntar xfz antlr-3.1.3.tar.gz\ncd antlr-3.1.3/runtime/Python/\nsudo python setup.py install", 
            "title": "Java Frontend with Java2Rusthon"
        }, 
        {
            "location": "/hello_java/#java", 
            "text": "Some hand written Java source code, auto converted to Rusthon's syntax,\nand merged with below.\n@java2rusthon  \npublic class HelloWorld {\n    public static void test() {\n        System.out.println( Hello, World test );\n    }\n\n    public static void foo(String msg) {\n        System.out.println(msg);\n    }\n\n}", 
            "title": "Java"
        }, 
        {
            "location": "/hello_java/#rusthon", 
            "text": "The above Java code is converted to Rusthon, and merged with this code.  #backend:c++\n\ndef main():\n    HelloWorld.test()\n    HelloWorld.foo( hi java )", 
            "title": "Rusthon"
        }, 
        {
            "location": "/nodejs_file/", 
            "text": "NodeJS Fake Python Builtin Modules\n\n\nusing \nfrom nodejs import *\n imports these modules that wrap around the nodejs api.\n\n\n\n\nos\n\n\nsys\n\n\nopen\n\n\ntempfile\n\n\n\n\nTo run this example run these commands in your shell, nodejs will be used to run it:\n\n\ncd\ngit clone https://github.com/rusthon/Rusthon.git\ncd Rusthon/\n./rusthon.py ./examples/nodejs_file.md --run=myapp.js\n\n\n\n\n@myapp.js\n\n\n#backend:javascript\nfrom runtime import *\nfrom nodejs import *\n\nf = open('/tmp/test.txt')\nf.write('hello world')\nf.close()\n\na = open('/tmp/test.txt', 'r')\nprint a.read()\n\ntdir = tempfile.gettempdir()\nprint tdir\n\nprint sys.argv\nprint sys.stdin\n\nprint os.environ\nprint os.getcwd()\nprint os.getpid()\n\nprint dir(os)\nprint dir(sys)", 
            "title": "NodeJs"
        }, 
        {
            "location": "/nodejs_file/#nodejs-fake-python-builtin-modules", 
            "text": "using  from nodejs import *  imports these modules that wrap around the nodejs api.   os  sys  open  tempfile   To run this example run these commands in your shell, nodejs will be used to run it:  cd\ngit clone https://github.com/rusthon/Rusthon.git\ncd Rusthon/\n./rusthon.py ./examples/nodejs_file.md --run=myapp.js  @myapp.js  #backend:javascript\nfrom runtime import *\nfrom nodejs import *\n\nf = open('/tmp/test.txt')\nf.write('hello world')\nf.close()\n\na = open('/tmp/test.txt', 'r')\nprint a.read()\n\ntdir = tempfile.gettempdir()\nprint tdir\n\nprint sys.argv\nprint sys.stdin\n\nprint os.environ\nprint os.getcwd()\nprint os.getpid()\n\nprint dir(os)\nprint dir(sys)", 
            "title": "NodeJS Fake Python Builtin Modules"
        }, 
        {
            "location": "/nodejs_tornado/", 
            "text": "NodeJS fake Tornado module\n\n\nsee \nnodejs_tornado.py\n\n\nnote: you need to install the nodejs module \nws\n, run \nsudo npm install -g ws\n.\n\n\nTo run this example run these commands in your shell, nodejs will be used to run it:\n\n\ncd\ngit clone https://github.com/rusthon/Rusthon.git\ncd Rusthon/\n./rusthon.py ./examples/nodejs_tornado.md --run=myapp.js\n\n\n\n\nThen open a web browser and go to http://localhost:8000\n\n\nhtml\n\n\n@index.html\n\n\nhtml\n\n\nhead\n\n\n/head\n\n\nbody\n\n\n@myscript\n\n\n/body\n\n\n/html\n\n\n\n\n\n@myscript\n\n\n#backend:javascript\nfrom runtime import *\n\nws = None\n\ndef on_open_ws():\n    print 'websocket open'\n    ws.send('hello server')\n\ndef on_close_ws():\n    print 'websocket close'\n\ndef on_message_ws(event):\n    print 'on message', event\n    print event.data\n\ndef connect_ws():\n    global ws\n    document.body.appendChild( document.createTextNode('testing websocket') )\n    addr = 'ws://' + location.host + '/websocket'\n    print 'websocket test connecting to:', addr\n    ws = new( WebSocket(addr) )\n    ws.binaryType = 'arraybuffer'\n    ws.onmessage = on_message_ws\n    ws.onopen = on_open_ws\n    ws.onclose = on_close_ws\n    print ws\n\nconnect_ws()\n\n\n\n\n\n@myapp.js\n\n\n#backend:javascript\nfrom runtime import *\nfrom nodejs import *\nfrom nodejs.tornado import *\n\nPORT = 8000\n\nclass MainHandler( tornado.web.RequestHandler ):\n\n    def get(self, path=None):\n        print('path', path)\n        if path == 'favicon.ico' or path.endswith('.map'):\n            self.write('')\n        else:\n            self.write( open('index.html').read() )\n\n\nclass WebSocketHandler(tornado.websocket.WebSocketHandler):\n\n    def open(self):\n        print( 'websocket open' )\n        print( self.request.connection )\n        self.write_message('hello client')\n\n    def on_message(self, msg):\n        print 'websocket - got %s bytes' %len(msg)\n        print msg\n\n    def on_close(self):\n        print('websocket closed')\n        if self.ws_connection:\n            self.close()\n\n## Tornado Handlers ##\nHandlers = [\n    ('/websocket', WebSocketHandler),\n    ('/', MainHandler),  ## order is important, this comes last.\n]\n\n## main ##\ndef main():\n    print('\nstarting tornado server\n')\n    app = new tornado.web.Application( Handlers )\n    app.listen( PORT )\n    tornado.ioloop.IOLoop.instance().start()\n\n## start main ##\nmain()", 
            "title": "NodeJsTornado"
        }, 
        {
            "location": "/nodejs_tornado/#nodejs-fake-tornado-module", 
            "text": "see  nodejs_tornado.py  note: you need to install the nodejs module  ws , run  sudo npm install -g ws .  To run this example run these commands in your shell, nodejs will be used to run it:  cd\ngit clone https://github.com/rusthon/Rusthon.git\ncd Rusthon/\n./rusthon.py ./examples/nodejs_tornado.md --run=myapp.js  Then open a web browser and go to http://localhost:8000", 
            "title": "NodeJS fake Tornado module"
        }, 
        {
            "location": "/nodejs_tornado/#html", 
            "text": "@index.html  html  head  /head  body  @myscript  /body  /html   @myscript  #backend:javascript\nfrom runtime import *\n\nws = None\n\ndef on_open_ws():\n    print 'websocket open'\n    ws.send('hello server')\n\ndef on_close_ws():\n    print 'websocket close'\n\ndef on_message_ws(event):\n    print 'on message', event\n    print event.data\n\ndef connect_ws():\n    global ws\n    document.body.appendChild( document.createTextNode('testing websocket') )\n    addr = 'ws://' + location.host + '/websocket'\n    print 'websocket test connecting to:', addr\n    ws = new( WebSocket(addr) )\n    ws.binaryType = 'arraybuffer'\n    ws.onmessage = on_message_ws\n    ws.onopen = on_open_ws\n    ws.onclose = on_close_ws\n    print ws\n\nconnect_ws()  @myapp.js  #backend:javascript\nfrom runtime import *\nfrom nodejs import *\nfrom nodejs.tornado import *\n\nPORT = 8000\n\nclass MainHandler( tornado.web.RequestHandler ):\n\n    def get(self, path=None):\n        print('path', path)\n        if path == 'favicon.ico' or path.endswith('.map'):\n            self.write('')\n        else:\n            self.write( open('index.html').read() )\n\n\nclass WebSocketHandler(tornado.websocket.WebSocketHandler):\n\n    def open(self):\n        print( 'websocket open' )\n        print( self.request.connection )\n        self.write_message('hello client')\n\n    def on_message(self, msg):\n        print 'websocket - got %s bytes' %len(msg)\n        print msg\n\n    def on_close(self):\n        print('websocket closed')\n        if self.ws_connection:\n            self.close()\n\n## Tornado Handlers ##\nHandlers = [\n    ('/websocket', WebSocketHandler),\n    ('/', MainHandler),  ## order is important, this comes last.\n]\n\n## main ##\ndef main():\n    print(' starting tornado server ')\n    app = new tornado.web.Application( Handlers )\n    app.listen( PORT )\n    tornado.ioloop.IOLoop.instance().start()\n\n## start main ##\nmain()", 
            "title": "html"
        }, 
        {
            "location": "/hello_osv/", 
            "text": "OSV Hello World\n\n\nWhat is OSv? http://osv.io/\n\n\nYou do not need to install OSv, Pythia will automatically download and build the base image for you.\nAfter installing Pythia, run this command, this will compile and run the example.\n\n\ncd\ngit clone https://github.com/secureosv/pythia.git\ncd pythia\nsudo ./install.sh\npythia ./examples/hello_osv.md --osv\n\n\n\n\n#backend:c++\nfrom runtime import *\nfrom time import sleep\nimport osv/power.hh\n\nclass A:\n    def __init__(self, txt:string ):\n        self.txt = txt\n    def foo(self):\n        print self.txt\n\ndef main():\n    a = A('hello world xxx')\n    a.foo()\n    sleep(1)\n    #osv::halt()  ## hang and lock up vm\n    print 'rebooting..'\n    osv::reboot()", 
            "title": "OSv"
        }, 
        {
            "location": "/hello_osv/#osv-hello-world", 
            "text": "What is OSv? http://osv.io/  You do not need to install OSv, Pythia will automatically download and build the base image for you.\nAfter installing Pythia, run this command, this will compile and run the example.  cd\ngit clone https://github.com/secureosv/pythia.git\ncd pythia\nsudo ./install.sh\npythia ./examples/hello_osv.md --osv  #backend:c++\nfrom runtime import *\nfrom time import sleep\nimport osv/power.hh\n\nclass A:\n    def __init__(self, txt:string ):\n        self.txt = txt\n    def foo(self):\n        print self.txt\n\ndef main():\n    a = A('hello world xxx')\n    a.foo()\n    sleep(1)\n    #osv::halt()  ## hang and lock up vm\n    print 'rebooting..'\n    osv::reboot()", 
            "title": "OSV Hello World"
        }, 
        {
            "location": "/javascript_gotchas/", 
            "text": "JavaScript Backend - Gotchas\n\n\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#Computed_property_names\n\n\n@myapp.js\n\n\n#backend:javascript\nfrom runtime import *\n\ndef foo():\n    return 'FOO'\n\ndef test():\n    print 'testing javascript gotchas'\n    a = 'bar'\n    d = {\n        a : 2,\n        foo() : 1\n    }\n    print d\n\n    ## dict literals follow javascript initalization rules,\n    ## where `a` is treated as an unquoted string literal,\n    ## instead of the variable  \n    assert d[ a ] is undefined\n    assert d[ 'a' ] == 2\n\n    ## this works because the transpiler is able to infer\n    ## in the construction of `d` that `foo()` is a function\n    ## call and not an unquoted string literal.\n    assert d[foo()] == 1\n\n    ## part of the new javascript standard ES6, allows for `Computed Property Names`,\n    ## by wrapping your key in `[]` the key value becomes an expression, and not an unquoted string literal.\n    ## Rusthon also supports this syntax, and transpiles it to javascript that will run in pre-ES6 browsers.\n    d = {\n        [a] : 1\n    }\n    assert d[a] == 1\n    print d\n\n    print 'testing list'\n\n    lst1 = [1,2,3]\n    lst2 = [1,2,3]\n    ## in regular python these would be equal,\n    ## but in javascript this is not the case.\n    assert lst1 != lst2\n    ## as a workaround you can use the method `equals`,\n    ## this uses JSON.stringify, to convert the lists to strings,\n    ## and tests if those strings are equal it returns true.\n    assert lst1.equals( lst2 )\n\n    lst2.append( 4 )\n    assert not lst1.equals( lst2 )\n\n    print 'test ok'\n\ntest()", 
            "title": "JavascriptGotchas"
        }, 
        {
            "location": "/javascript_gotchas/#javascript-backend-gotchas", 
            "text": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#Computed_property_names  @myapp.js  #backend:javascript\nfrom runtime import *\n\ndef foo():\n    return 'FOO'\n\ndef test():\n    print 'testing javascript gotchas'\n    a = 'bar'\n    d = {\n        a : 2,\n        foo() : 1\n    }\n    print d\n\n    ## dict literals follow javascript initalization rules,\n    ## where `a` is treated as an unquoted string literal,\n    ## instead of the variable  \n    assert d[ a ] is undefined\n    assert d[ 'a' ] == 2\n\n    ## this works because the transpiler is able to infer\n    ## in the construction of `d` that `foo()` is a function\n    ## call and not an unquoted string literal.\n    assert d[foo()] == 1\n\n    ## part of the new javascript standard ES6, allows for `Computed Property Names`,\n    ## by wrapping your key in `[]` the key value becomes an expression, and not an unquoted string literal.\n    ## Rusthon also supports this syntax, and transpiles it to javascript that will run in pre-ES6 browsers.\n    d = {\n        [a] : 1\n    }\n    assert d[a] == 1\n    print d\n\n    print 'testing list'\n\n    lst1 = [1,2,3]\n    lst2 = [1,2,3]\n    ## in regular python these would be equal,\n    ## but in javascript this is not the case.\n    assert lst1 != lst2\n    ## as a workaround you can use the method `equals`,\n    ## this uses JSON.stringify, to convert the lists to strings,\n    ## and tests if those strings are equal it returns true.\n    assert lst1.equals( lst2 )\n\n    lst2.append( 4 )\n    assert not lst1.equals( lst2 )\n\n    print 'test ok'\n\ntest()", 
            "title": "JavaScript Backend - Gotchas"
        }, 
        {
            "location": "/javascript_webworkers/", 
            "text": "WebWorkers\n\n\nWebWorkers is a browser standard that allows you to use the extra CPU cores on the client.\n\n\nTo run this example run these commands in your shell:\n\n\ncd\ngit clone https://github.com/rusthon/Rusthon.git\ncd Rusthon/\n./rusthon.py ./examples/javascript_webworkers.md\n\n\n\n\nhtml\n\n\n@index.html\n\n\nhtml\n\n\nhead\n\n\n/head\n\n\nbody\n\n\npre id=\nCONTAINER\n\n\n/pre\n\n\n@myscript\n\n\n/body\n\n\n/html\n\n\n\n\n\nWebworker Syntax\n\n\nThe Javascript backend uses some syntax inspired by Golang to simplify using WebSockets.\nBelow the class \nWorker\n must define a \nsend\n method that takes a message and returns something to the main thread.\n\n\n@myscript\n\n\n#backend:javascript\nfrom runtime import *\n\ndef show(txt):\n    document.getElementById('CONTAINER').appendChild(\n        document.createTextNode(txt + '\\n')\n    )\n\nwith webworker:\n    class Worker():\n        def send(self,ob):\n            ## do some long computation here ##\n            return ob\n\n@debugger\ndef test():\n    show('spawn workers')\n    worker1 = spawn(\n        Worker()\n    )\n    worker2 = spawn(\n        Worker()\n    )\n    ## wait for awhile before sending messages ##\n    window.setTimeout(\n        lambda: test_workers(worker1,worker2),\n        1500,\n    )\n\ndef test_workers(worker1, worker2):\n    show('sending data to workers')\n    worker1 \n- 'msg 1'\n    worker1 \n- 'msg 2'\n    worker1 \n- 'msg 3'\n    worker1 \n- 'msg 4'\n\n    worker2 \n- 'msg 5'\n    worker2 \n- 'msg 6'\n    worker2 \n- 'msg 7'\n    worker2 \n- 'msg 8'\n\n    show('getting data from workers')\n    res = \n- worker1\n    show('got first reply from worker')\n    show(res)\n    res = \n- worker1\n    show(res)\n    res = \n- worker1\n    show(res)\n    res = \n- worker1\n    show(res)\n\n    res = \n- worker2\n    show(res)\n    res = \n- worker2\n    show(res)\n    res = \n- worker2\n    show(res)\n    res = \n- worker2\n    show(res)\n\n    show('ok')\n\n\n\nwindow.setTimeout(test, 1000)", 
            "title": "JavascriptWebworkers"
        }, 
        {
            "location": "/javascript_webworkers/#webworkers", 
            "text": "WebWorkers is a browser standard that allows you to use the extra CPU cores on the client.  To run this example run these commands in your shell:  cd\ngit clone https://github.com/rusthon/Rusthon.git\ncd Rusthon/\n./rusthon.py ./examples/javascript_webworkers.md", 
            "title": "WebWorkers"
        }, 
        {
            "location": "/javascript_webworkers/#html", 
            "text": "@index.html  html  head  /head  body  pre id= CONTAINER  /pre  @myscript  /body  /html", 
            "title": "html"
        }, 
        {
            "location": "/javascript_webworkers/#webworker-syntax", 
            "text": "The Javascript backend uses some syntax inspired by Golang to simplify using WebSockets.\nBelow the class  Worker  must define a  send  method that takes a message and returns something to the main thread.  @myscript  #backend:javascript\nfrom runtime import *\n\ndef show(txt):\n    document.getElementById('CONTAINER').appendChild(\n        document.createTextNode(txt + '\\n')\n    )\n\nwith webworker:\n    class Worker():\n        def send(self,ob):\n            ## do some long computation here ##\n            return ob\n\n@debugger\ndef test():\n    show('spawn workers')\n    worker1 = spawn(\n        Worker()\n    )\n    worker2 = spawn(\n        Worker()\n    )\n    ## wait for awhile before sending messages ##\n    window.setTimeout(\n        lambda: test_workers(worker1,worker2),\n        1500,\n    )\n\ndef test_workers(worker1, worker2):\n    show('sending data to workers')\n    worker1  - 'msg 1'\n    worker1  - 'msg 2'\n    worker1  - 'msg 3'\n    worker1  - 'msg 4'\n\n    worker2  - 'msg 5'\n    worker2  - 'msg 6'\n    worker2  - 'msg 7'\n    worker2  - 'msg 8'\n\n    show('getting data from workers')\n    res =  - worker1\n    show('got first reply from worker')\n    show(res)\n    res =  - worker1\n    show(res)\n    res =  - worker1\n    show(res)\n    res =  - worker1\n    show(res)\n\n    res =  - worker2\n    show(res)\n    res =  - worker2\n    show(res)\n    res =  - worker2\n    show(res)\n    res =  - worker2\n    show(res)\n\n    show('ok')\n\n\n\nwindow.setTimeout(test, 1000)", 
            "title": "Webworker Syntax"
        }
    ]
}