{
    "docs": [
        {
            "location": "/", 
            "text": "pythia links\n\n\n\n\npythia extended markdown\n\n\npython+numpy on OSv demo\n\n\npythia extended lambda syntax", 
            "title": "Home"
        }, 
        {
            "location": "/#pythia-links", 
            "text": "pythia extended markdown  python+numpy on OSv demo  pythia extended lambda syntax", 
            "title": "pythia links"
        }, 
        {
            "location": "/quick_start/", 
            "text": "installing pythia\n\n\npythia requires 64bit linux and g++4.9 for all features and test scripts to work.\n\n\nRun \ninstall.sh\n script as root.\nThis creates a symbolic link \npythia\n that points to the current location of \npythia.py\n.\n\n\ncd\ngit clone https://github.com/secureosv/pythia.git\ncd pythia\nsudo ./install.sh\n\n\n\n\noptional dependencies\n\n\n\n\ngit\n\n\ngnuplot\n\n\ncython\n\n\n\n\ndocumentation\n\n\n\n\ngetting started\n\n\nsyntax\n\n\nseastar", 
            "title": "QuickStart"
        }, 
        {
            "location": "/quick_start/#installing-pythia", 
            "text": "pythia requires 64bit linux and g++4.9 for all features and test scripts to work.  Run  install.sh  script as root.\nThis creates a symbolic link  pythia  that points to the current location of  pythia.py .  cd\ngit clone https://github.com/secureosv/pythia.git\ncd pythia\nsudo ./install.sh", 
            "title": "installing pythia"
        }, 
        {
            "location": "/quick_start/#optional-dependencies", 
            "text": "git  gnuplot  cython", 
            "title": "optional dependencies"
        }, 
        {
            "location": "/quick_start/#documentation", 
            "text": "getting started  syntax  seastar", 
            "title": "documentation"
        }, 
        {
            "location": "/getting_started/", 
            "text": "using \npythia\n command line\n\n\npythia compiles \nmarkdown containers\n into executeable packages.\n\n\nto build and run a markdown container file\n\n\npythia mymarkdown.md\n\n\n\n\nnote: to see all the command line options run \npythia --help\n\n\noutput c++ and run binary\n\n\ntranspile python script to c++, build and run\n\n\npythia myscript.py\n\n\n\n\njavascript backend\n\n\ntranspile python script to javascript, build and run in node.js\n\n\npythia myscript.py --javascript\n\n\n\n\noutput simple tar container\n\n\nbuild and save to a tar file\n\n\npythia mymarkdown.md myoutput.tar\n\n\n\n\nOSv\n\n\nPythia generates containers for \nOSv\n a cloud optimized operating system.\n\n\nhttp://osv.io/\n\n\nuse \n--osv\n , to package into an OSv container and run in qemu.\n(requires 64bit linux)\n\n\npythia path/to/mymarkdown.md mybuild.tar  --osv\n\n\n\n\ninstalling pythia on 64bix linux\n\n\nrun \ninstall.sh\n script as root.\n\n\ngit clone https://github.com/secureosv/pythia.git\ncd pythia\nsudo ./install.sh", 
            "title": "CommandLine"
        }, 
        {
            "location": "/getting_started/#using-pythia-command-line", 
            "text": "pythia compiles  markdown containers  into executeable packages.  to build and run a markdown container file  pythia mymarkdown.md  note: to see all the command line options run  pythia --help", 
            "title": "using pythia command line"
        }, 
        {
            "location": "/getting_started/#output-c-and-run-binary", 
            "text": "transpile python script to c++, build and run  pythia myscript.py", 
            "title": "output c++ and run binary"
        }, 
        {
            "location": "/getting_started/#javascript-backend", 
            "text": "transpile python script to javascript, build and run in node.js  pythia myscript.py --javascript", 
            "title": "javascript backend"
        }, 
        {
            "location": "/getting_started/#output-simple-tar-container", 
            "text": "build and save to a tar file  pythia mymarkdown.md myoutput.tar", 
            "title": "output simple tar container"
        }, 
        {
            "location": "/getting_started/#osv", 
            "text": "Pythia generates containers for  OSv  a cloud optimized operating system.  http://osv.io/  use  --osv  , to package into an OSv container and run in qemu.\n(requires 64bit linux)  pythia path/to/mymarkdown.md mybuild.tar  --osv", 
            "title": "OSv"
        }, 
        {
            "location": "/getting_started/#installing-pythia-on-64bix-linux", 
            "text": "run  install.sh  script as root.  git clone https://github.com/secureosv/pythia.git\ncd pythia\nsudo ./install.sh", 
            "title": "installing pythia on 64bix linux"
        }, 
        {
            "location": "/markdown_format/", 
            "text": "Markdown Containers\n\n\nThe primary format \npythia\n works with is \nmarkdown\n containers files (\n.md\n).\nMarkdown containers allow you to bundle code and data into a single file.  They store project and file directory stucture,\ncode build options, and code documentation.\n\n\nMarkdown files that contain fenced-code-blocks using \ngithub style markdown\n, can be compiled and run with \npythia\n.\nTripple backquotes \n\u02bd\u02bd\u02bd\n are used to fence a block of code.  The start of a fence can contain a language name, like: \n\u02bd\u02bd\u02bdc++\n,\nthis will trigger that fenced code block to be compiled with \ng++\n.\n\n\nFenced code blocks can also contain a label that must be on the line just before it and start with \n@\n followed by a file name\nor the special label name \n@embed\n.\n\n\nMulti-backend Python Transpiler\n\n\nFenced code blocks that begin with \n\u02bd\u02bd\u02bdpythia\n will be transpiled to C++14 (by default), and compiled with \ng++\n.\nA single markdown file can contain multiple targets to transpile, each fenced block must have its own file name label,\nand define at the start of the script which backend to transpile with.\n\n\nPythia's transpiler will check each script's first line for a special comment starting with \n#backend:\n, valid options are:\n\n \n#backend:c++\n\n\n \n#backend:javascript\n\n* \n#backend:go", 
            "title": "ExtendedMarkdown"
        }, 
        {
            "location": "/markdown_format/#markdown-containers", 
            "text": "The primary format  pythia  works with is  markdown  containers files ( .md ).\nMarkdown containers allow you to bundle code and data into a single file.  They store project and file directory stucture,\ncode build options, and code documentation.  Markdown files that contain fenced-code-blocks using  github style markdown , can be compiled and run with  pythia .\nTripple backquotes  \u02bd\u02bd\u02bd  are used to fence a block of code.  The start of a fence can contain a language name, like:  \u02bd\u02bd\u02bdc++ ,\nthis will trigger that fenced code block to be compiled with  g++ .  Fenced code blocks can also contain a label that must be on the line just before it and start with  @  followed by a file name\nor the special label name  @embed .", 
            "title": "Markdown Containers"
        }, 
        {
            "location": "/markdown_format/#multi-backend-python-transpiler", 
            "text": "Fenced code blocks that begin with  \u02bd\u02bd\u02bdpythia  will be transpiled to C++14 (by default), and compiled with  g++ .\nA single markdown file can contain multiple targets to transpile, each fenced block must have its own file name label,\nand define at the start of the script which backend to transpile with.  Pythia's transpiler will check each script's first line for a special comment starting with  #backend: , valid options are:   #backend:c++    #backend:javascript \n*  #backend:go", 
            "title": "Multi-backend Python Transpiler"
        }, 
        {
            "location": "/syntax/", 
            "text": "Pythia's C++ translator requires static programs.\nThe static type syntax is inspired by, and borrows from: Cython, C++, Rust and Golang.\n\n\nPythia is similar to \nRPython\n, a restricted and non-dynamic subset of Python.\n\n\nstatic typed vectors\n\n\nlist and array doc\n\n\na = []int(1,2,3)\nb = []int(x for x in range(3))\n\n\n\n\nstatic typed maps\n\n\na = map[string]int{'a':1, 'b':2}\n\n\n\n\nmap iteration\n\n\nThe key value pairs can be looped over with a for loop.\n\n\ndef main():\n    a = map[string]int{'x':100, 'y':200}\n    b = ''\n    c = 0\n    for key,value in a:\n        b += key\n        c += value\n\n\n\n\nasync channels\n\n\nhttps://github.com/rusthon/Rusthon/blob/master/regtests/rust/chan_universal_style.py\n\n\nsender, recver = channel(int)\n\n\n\n\n- send data\n\n\na \n- b\n\n\n\n\nchannel select\n\n\nswitches to a given case when the channel data is ready.\n\n\nselect:\n    case x = \n- a:\n        y += x\n    case x = \n- b:\n        y += x\n\n\n\n\nfunction channel parameter types\n\n\ndef sender_wrapper( sender: chan Sender\nint\n ):\n    sender \n- 100\n\ndef recv_wrapper(recver: chan Receiver\nint\n ):\n    result = \n- recver\n\n\n\n\nswitch syntax\n\n\nswitch a == b:\n    case True:\n        x = z\n    case False:\n        y = z\n    default:\n        break\n\n\n\n\n\nJavaScript Extra Syntax\n\n\nvar\n\n\n. \nvar\n is allowed before a variable name in an assignment.\n\n\n    var x = 1\n\n\n\n\nnew\n\n\n. 'new' can be used to create a new JavaScript object\n\n\n    a = new SomeObject()\n\n\n\n\nJquery\n\n\n. \n$\n can be used to call a function like jquery\n\n\n    $(selector).something( {'param1':1, 'param2':2} )\n\n\n\n\n. External Javascript functions that use an object as the last argument for optional named arguments, can be called with Python style keyword names instead.\n\n\n    $(selector).something( param1=1, param2=2 )\n\n\n\n\n. \n$\n can be used as a funtion parameter, and attributes can be get/set on \n$\n.\n\n\ndef setup_my_jquery_class( $ ):\n    $.fn.someclass = myclass_init\n\n\n\n\nexception expressions\n\n\nthis is a shortcut for writting simple try/except blocks that assign a value to a variable\n(PEP 463)\n\n\na = {}\nb = a['somekey'] except KeyError: 'my-default'\n\n\n\n\nInvalid Syntax\n\n\n. \nwith\n is reserved for special purposes.\n\n  . \nfor/else\n and \nwhile/else\n are deprecated.", 
            "title": "Syntax"
        }, 
        {
            "location": "/syntax/#static-typed-vectors", 
            "text": "list and array doc  a = []int(1,2,3)\nb = []int(x for x in range(3))", 
            "title": "static typed vectors"
        }, 
        {
            "location": "/syntax/#static-typed-maps", 
            "text": "a = map[string]int{'a':1, 'b':2}", 
            "title": "static typed maps"
        }, 
        {
            "location": "/syntax/#map-iteration", 
            "text": "The key value pairs can be looped over with a for loop.  def main():\n    a = map[string]int{'x':100, 'y':200}\n    b = ''\n    c = 0\n    for key,value in a:\n        b += key\n        c += value", 
            "title": "map iteration"
        }, 
        {
            "location": "/syntax/#async-channels", 
            "text": "https://github.com/rusthon/Rusthon/blob/master/regtests/rust/chan_universal_style.py  sender, recver = channel(int)", 
            "title": "async channels"
        }, 
        {
            "location": "/syntax/#-send-data", 
            "text": "a  - b", 
            "title": "&lt;- send data"
        }, 
        {
            "location": "/syntax/#channel-select", 
            "text": "switches to a given case when the channel data is ready.  select:\n    case x =  - a:\n        y += x\n    case x =  - b:\n        y += x", 
            "title": "channel select"
        }, 
        {
            "location": "/syntax/#function-channel-parameter-types", 
            "text": "def sender_wrapper( sender: chan Sender int  ):\n    sender  - 100\n\ndef recv_wrapper(recver: chan Receiver int  ):\n    result =  - recver", 
            "title": "function channel parameter types"
        }, 
        {
            "location": "/syntax/#switch-syntax", 
            "text": "switch a == b:\n    case True:\n        x = z\n    case False:\n        y = z\n    default:\n        break", 
            "title": "switch syntax"
        }, 
        {
            "location": "/syntax/#javascript-extra-syntax", 
            "text": "", 
            "title": "JavaScript Extra Syntax"
        }, 
        {
            "location": "/syntax/#var", 
            "text": ".  var  is allowed before a variable name in an assignment.      var x = 1", 
            "title": "var"
        }, 
        {
            "location": "/syntax/#new", 
            "text": ". 'new' can be used to create a new JavaScript object      a = new SomeObject()", 
            "title": "new"
        }, 
        {
            "location": "/syntax/#jquery", 
            "text": ".  $  can be used to call a function like jquery      $(selector).something( {'param1':1, 'param2':2} )  . External Javascript functions that use an object as the last argument for optional named arguments, can be called with Python style keyword names instead.      $(selector).something( param1=1, param2=2 )  .  $  can be used as a funtion parameter, and attributes can be get/set on  $ .  def setup_my_jquery_class( $ ):\n    $.fn.someclass = myclass_init", 
            "title": "Jquery"
        }, 
        {
            "location": "/syntax/#exception-expressions", 
            "text": "this is a shortcut for writting simple try/except blocks that assign a value to a variable\n(PEP 463)  a = {}\nb = a['somekey'] except KeyError: 'my-default'", 
            "title": "exception expressions"
        }, 
        {
            "location": "/syntax/#invalid-syntax", 
            "text": ".  with  is reserved for special purposes. \n  .  for/else  and  while/else  are deprecated.", 
            "title": "Invalid Syntax"
        }, 
        {
            "location": "/lists/", 
            "text": "When transpiled to C++14 lists \n[]\n are converted to a vector of a single element type.  In regular python you are allowed to create a list that contains different types, like: \n[1, \"foo\", 2.2]\n, this is not allowed in Pythia because the list must be translated into a C++11 vector type \nstd::vector\nT\n (where \nT\n is the element type).  Lists and other container types are restricted in this way, and follows closely the \nRPython language spec\n.\n\n\ninvalid list\n\n\nlists of multiple types are not allowed\n\n\na = [100, \nmystring\n, 99.9999]\n\n\n\n\ninteger list\n\n\nif the type of a list can be inferred from its arguments, \nthen regular python syntax can be used to create it,\notherwise the syntax \n[]int(...)\n must be used.\n\n\na = [1,2,3]\nb = []int()\nc = []int(1,2,3)\n\n\n\n\nfixed size arrays\n\n\nin stack mode a fixed size array is allocated as a low level C array,\nand new items can not be appended to it. \n\n\nwith stack:\n    a = [2]int()\n    a[0] = 100\n    a[1] = 2500\n\n\n\n\nmulti dimensional lists\n\n\na = [][]int()\na.append( [1,2,3] )\na.append( [3,4,5] )\nassert a[0][0]==1\nassert a[1][2]==5\n\n\n\n\nslicing lists\n\n\nwhen slicing a list the slice must be assigned to a variable,\npassing a slice directly in a function call \nf( a[1:2] )\n is not allowed.\n\n\nmyslice = mylist[ 10:2 ]\nf( myslice )", 
            "title": "Lists"
        }, 
        {
            "location": "/lists/#invalid-list", 
            "text": "lists of multiple types are not allowed  a = [100,  mystring , 99.9999]", 
            "title": "invalid list"
        }, 
        {
            "location": "/lists/#integer-list", 
            "text": "if the type of a list can be inferred from its arguments, \nthen regular python syntax can be used to create it,\notherwise the syntax  []int(...)  must be used.  a = [1,2,3]\nb = []int()\nc = []int(1,2,3)", 
            "title": "integer list"
        }, 
        {
            "location": "/lists/#fixed-size-arrays", 
            "text": "in stack mode a fixed size array is allocated as a low level C array,\nand new items can not be appended to it.   with stack:\n    a = [2]int()\n    a[0] = 100\n    a[1] = 2500", 
            "title": "fixed size arrays"
        }, 
        {
            "location": "/lists/#multi-dimensional-lists", 
            "text": "a = [][]int()\na.append( [1,2,3] )\na.append( [3,4,5] )\nassert a[0][0]==1\nassert a[1][2]==5", 
            "title": "multi dimensional lists"
        }, 
        {
            "location": "/lists/#slicing-lists", 
            "text": "when slicing a list the slice must be assigned to a variable,\npassing a slice directly in a function call  f( a[1:2] )  is not allowed.  myslice = mylist[ 10:2 ]\nf( myslice )", 
            "title": "slicing lists"
        }, 
        {
            "location": "/memory/", 
            "text": "Pythia script translated into C++14 will allocate objects on the heap, \nand use standard reference counted garbage collection by default.\n\n\nEach of these object types will be wrapped by \nstd::shared_ptr\nT\n:\n\n \nmyclass()\n objects are initialized as \nstd::shared_ptr\nmyclass\n\n\n \n[]\n lists become \nstd::shared_ptr\nstd::vector\nT\n\n* \n{}\n dicts become \nstd::shared_ptr\nstd::map\nK,V\n\n\nNote in stack memory mode, objects are not wrapped by \nstd::shared_ptr\nT\n,\nand memory is automatically freed when it falls out of scope.\n\n\ncreate an object on the stack\n\n\nwith stack:\n    a = MyClass()\n\n\n\n\ncreate an array on the stack\n\n\nwith stack:\n    a = [1,2,3]\n\n\n\n\ncyclic data structures\n\n\nWrapping objects with \nstd::shared_ptr\n requires using \nstd::weak_ptr\n to break cyclic references.\nThe translator will detect simple cases where a child class has a reference to a class that contains \na list of itself, when this is found the parent will be wrapped with \nstd::weak_ptr\n instead of \nstd::shared_ptr\n\n\nThe child can then access its parent with some additional logic,\ngetting a reference to the parent must be done by wrapping it with\n\np = weakref.unwrap( self.myparent )\n\nand then checking if \np\n is None.\n\nif p is None: print \"parent has been freed\"\n\nthen if the parent is not None, it can be used normally, because \nweakref.unwrap()\n will convert the \nstd::weak_ref\n to a \nstd::shared_ptr\n.", 
            "title": "MemoryModel"
        }, 
        {
            "location": "/memory/#create-an-object-on-the-stack", 
            "text": "with stack:\n    a = MyClass()", 
            "title": "create an object on the stack"
        }, 
        {
            "location": "/memory/#create-an-array-on-the-stack", 
            "text": "with stack:\n    a = [1,2,3]", 
            "title": "create an array on the stack"
        }, 
        {
            "location": "/memory/#cyclic-data-structures", 
            "text": "Wrapping objects with  std::shared_ptr  requires using  std::weak_ptr  to break cyclic references.\nThe translator will detect simple cases where a child class has a reference to a class that contains \na list of itself, when this is found the parent will be wrapped with  std::weak_ptr  instead of  std::shared_ptr  The child can then access its parent with some additional logic,\ngetting a reference to the parent must be done by wrapping it with p = weakref.unwrap( self.myparent ) \nand then checking if  p  is None. if p is None: print \"parent has been freed\" \nthen if the parent is not None, it can be used normally, because  weakref.unwrap()  will convert the  std::weak_ref  to a  std::shared_ptr .", 
            "title": "cyclic data structures"
        }, 
        {
            "location": "/seastar/", 
            "text": "Seastar Example\n\n\nPythia includes syntax for calling and chaining lambda functions.\nThe syntax below \nand then():\n chains a new lambda function to the previous one.\nThe functions are defined under \nwith stack:\n are set to use stack memory mode (CPU Cache).\nnote: the default memory mode is c++11 smart pointers (reference counted garbage collection).\n\n\n\nwith stack:\n    def delay(seconds) -\n future\n:\n        print 'sleeping', seconds\n        sleep(seconds)\n        return future\n\n    def f() -\n future\n:\n        delay(1) and then():\n            print 'sleep1'\n            and then():\n                print 'sleep1.1'\n                delay(1) and then():\n                    print 'nested 1.1:1'\n                    and then():\n                        print 'nested 1.1:2'\n\n            and then():\n                print 'sleep1.2'\n                and then():\n                    print 'sleep1.2.1'\n\n        delay(2) and then():\n            print 'sleep2'\n\n        return delay(3) and then():\n            print 'all done'", 
            "title": "Seastar"
        }, 
        {
            "location": "/seastar/#seastar-example", 
            "text": "Pythia includes syntax for calling and chaining lambda functions.\nThe syntax below  and then():  chains a new lambda function to the previous one.\nThe functions are defined under  with stack:  are set to use stack memory mode (CPU Cache).\nnote: the default memory mode is c++11 smart pointers (reference counted garbage collection).  \nwith stack:\n    def delay(seconds) -  future :\n        print 'sleeping', seconds\n        sleep(seconds)\n        return future\n\n    def f() -  future :\n        delay(1) and then():\n            print 'sleep1'\n            and then():\n                print 'sleep1.1'\n                delay(1) and then():\n                    print 'nested 1.1:1'\n                    and then():\n                        print 'nested 1.1:2'\n\n            and then():\n                print 'sleep1.2'\n                and then():\n                    print 'sleep1.2.1'\n\n        delay(2) and then():\n            print 'sleep2'\n\n        return delay(3) and then():\n            print 'all done'", 
            "title": "Seastar Example"
        }, 
        {
            "location": "/js_backend/", 
            "text": "Pythia Javascript Backend\n\n\nold wiki page\n\n\nPythonJS Runtime\n\n\nIf you include in your script the line \nfrom runtime import *\n,\nthe translator will include the helper functions and builtins\nthat emulate a subset of Python's features, builtins and data types.\n\n\nOperator Overloading\n\n\nTo use operator overloading you need to be explicit when you are using it.\nYou can also use \nwith oo:\n\n\nwith operator_overloading:\n    a = [1,2]\n    a += [3,4]\n    b = a + [5.6]\n\n\n\n\n\nExamples\n\n\n\n\nhttps://github.com/rusthon/Rusthon/blob/master/examples/hello_javascript.md\n\n\nhttps://github.com/rusthon/Rusthon/blob/master/examples/javascript_syntax.md\n\n\nhttps://github.com/rusthon/Rusthon/blob/master/examples/hello_angular.md\n\n\nhttps://github.com/rusthon/Rusthon/blob/master/examples/hello_peerjs.md\n\n\nhttps://github.com/rusthon/Rusthon/blob/master/examples/hello_rapydscript.md\n\n\nhttps://github.com/rusthon/Rusthon/blob/master/examples/hello_threejs.md\n\n\nhttps://github.com/rusthon/Rusthon/blob/master/examples/javascript_webworkers.md\n\n\n\n\nClasses\n\n\n    class A:\n        def __init__(self, x,y,z):\n            self.x = x\n            self.y = y\n            self.z = z\n\n        def foo(self, w):\n            return self.x + w\n\n\n\n\n\njavascript\n\n\n    A = function(x, y, z) {\n      A.__init__(this, x,y,z);\n    }\n\n    A.prototype.__init__ = function(x, y, z) {\n      this.x=x;\n      this.y=y;\n      this.z=z;\n    }\n    A.__init__ = function () { return A.prototype.__init__.apply(arguments[0], Array.prototype.slice.call(arguments,1)) };\n\n    A.prototype.foo = function(w) {\n      return (this.x + w);\n    }\n    A.foo = function () { return A.prototype.foo.apply(arguments[0], Array.prototype.slice.call(arguments,1)) };\n\n\n\n\nMethod Overrides\n\n\nIn the example above, you might be wondering why in the JavaScript translation, is the class A constructor calling \nA.__init__(this, x,y,z)\n, and why is the \n__init__\n method assigned \nA.prototype\n and then wrapped and assigned to \nA.__init__\n.  This is done so that subclasses are able to override their parent's methods, but still have a way of calling them, an example that subclasses A will make this more clear.\n\n\n    class B( A ):\n        def __init__(self, w):\n            A.__init__(self, 10, 20, 30)\n            self.w = w\n\n\n\n\njavascript\n\n\n    B = function(w) {\n      B.__init__(this, w);\n    }\n\n    B.prototype.__init__ = function(w) {\n      A.__init__(this,10,20,30);\n      this.w=w;\n    }\n    B.__init__ = function () { return B.prototype.__init__.apply(arguments[0], Array.prototype.slice.call(arguments,1)) };\n\n    for (var n in A.prototype) {  if (!(n in B.prototype)) {    B.prototype[n] = A.prototype[n]  }};\n\n\n\n\nThe above output Javascript shows how the constructor for \nB\n calls \nB.__init__\n which then calls \nB.prototype.__init__\n.\n\nB.prototype.__init__\n calls \nA.__init__\n passing \nthis\n as the first argument.  This emulates in JavaScript how unbound methods work in Python.  When using the Dart backend, the output is different but the concept is the same - static \"class methods\" are created that implement the method body, the instance methods are just short stubs that call the static \"class methods\".\n\n\nWebWorkers\n\n\nUsing webworkers directly, straight sucks.  PythonJS hides all that shit, so you can write clear code with a syntax inspired by Golang.  This syntax \nA \n- B\n, sends data to \nA\n which is an instance that was spawned into the webworker-pool.  This syntax \nN = \n- A\n, gets data from \nA\n, note that this appears to be blocking code, but it is actually not (the transpiler transforms it into async code)\n\n\n\nwith webworker:\n    class MyClass:\n        def send(self, msg):\n            return msg\n\n\nw = spawn( MyClass() )\nw \n- 'hello'\nw \n- 'world'\n\na = \n- w\nb = \n- w\nprint a + b\n\n\n\n\n\nGenerator Functions\n\n\nFunctions that use the \nyield\n keyword are generator functions.  They allow you to quickly write complex iterables.\nPythonJS supports simple generator functions that have a single for loop, and up to three \nyield\n statements.\nThe first \nyield\n comes before the for loop, and the final \nyield\n comes after the for loop.\nThe compiler will translate your generator function into a simple class with state-machine.  This implementation\nbypasses using the native JavaScript \nyield\n keyword, and ensures that your generator function can work in all web browsers.  \n\n\nInstances of the generator function will have a next method.  Using a for loop to iterate over a generator function will automatically call its next method.\n\n\n    def fib(n):\n        yield 'hello'\n        a, b = 0, 1\n        for x in range(n):\n            yield a\n            a,b = b, a+b\n        yield 'world'\n\n    def test():\n        for n in fib(20):\n            print n\n\n\n\n\njavascript\n\n\n    fib = function(n) {\n      this.n = n;\n      this.__head_yield = \nhello\n;\n      this.__head_returned = 0;\n      var __r_0;\n      __r_0 = [0, 1];\n      this.a = __r_0[0];\n      this.b = __r_0[1];\n      this.__iter_start = 0;\n      this.__iter_index = 0;\n      this.__iter_end = this.n;\n      this.__done__ = 0;\n    }\n\n    fib.prototype.next = function() {\n      if (( this.__head_returned ) == 0) {\n        this.__head_returned = 1;\n        return this.__head_yield;\n      } else {\n        if (( this.__iter_index ) \n this.__iter_end) {\n          __yield_return__ = this.a;\n          var __r_1;\n          __r_1 = [this.b, (this.a + this.b)];\n          this.a = __r_1[0];\n          this.b = __r_1[1];\n          this.__iter_index += 1\n          return __yield_return__;\n        } else {\n          this.__done__ = 1;\n          __yield_return__ = \nworld\n;\n          return __yield_return__;\n        }\n      }\n    }\n\n    test = function(args, kwargs) {\n      var __iterator__, n;\n      var n, __generator__;\n      __generator__ = new fib(20);\n      while(( __generator__.__done__ ) != 1) {\n        n = __generator__.next();\n        console.log(n);\n      }\n    }\n\n\n\n\nInline JavaScript\n\n\nUse \ninline(str)\n to inline javascript code\n\n\n    inline(\nvar arr = new Array()\n)\n    inline(\nvar ob = new Object()\n)\n    inline(\nob['key'] = 'value'\n)\n    if inline(\nObject.prototype.toString.call( arr ) === '[object Array]'\n):\n        inline(\narr.push('hello world')\n)\n        inline(\narr.push( ob )\n)", 
            "title": "JavaScript"
        }, 
        {
            "location": "/js_backend/#pythia-javascript-backend", 
            "text": "old wiki page", 
            "title": "Pythia Javascript Backend"
        }, 
        {
            "location": "/js_backend/#pythonjs-runtime", 
            "text": "If you include in your script the line  from runtime import * ,\nthe translator will include the helper functions and builtins\nthat emulate a subset of Python's features, builtins and data types.", 
            "title": "PythonJS Runtime"
        }, 
        {
            "location": "/js_backend/#operator-overloading", 
            "text": "To use operator overloading you need to be explicit when you are using it.\nYou can also use  with oo:  with operator_overloading:\n    a = [1,2]\n    a += [3,4]\n    b = a + [5.6]", 
            "title": "Operator Overloading"
        }, 
        {
            "location": "/js_backend/#examples", 
            "text": "https://github.com/rusthon/Rusthon/blob/master/examples/hello_javascript.md  https://github.com/rusthon/Rusthon/blob/master/examples/javascript_syntax.md  https://github.com/rusthon/Rusthon/blob/master/examples/hello_angular.md  https://github.com/rusthon/Rusthon/blob/master/examples/hello_peerjs.md  https://github.com/rusthon/Rusthon/blob/master/examples/hello_rapydscript.md  https://github.com/rusthon/Rusthon/blob/master/examples/hello_threejs.md  https://github.com/rusthon/Rusthon/blob/master/examples/javascript_webworkers.md", 
            "title": "Examples"
        }, 
        {
            "location": "/js_backend/#classes", 
            "text": "class A:\n        def __init__(self, x,y,z):\n            self.x = x\n            self.y = y\n            self.z = z\n\n        def foo(self, w):\n            return self.x + w", 
            "title": "Classes"
        }, 
        {
            "location": "/js_backend/#javascript", 
            "text": "A = function(x, y, z) {\n      A.__init__(this, x,y,z);\n    }\n\n    A.prototype.__init__ = function(x, y, z) {\n      this.x=x;\n      this.y=y;\n      this.z=z;\n    }\n    A.__init__ = function () { return A.prototype.__init__.apply(arguments[0], Array.prototype.slice.call(arguments,1)) };\n\n    A.prototype.foo = function(w) {\n      return (this.x + w);\n    }\n    A.foo = function () { return A.prototype.foo.apply(arguments[0], Array.prototype.slice.call(arguments,1)) };", 
            "title": "javascript"
        }, 
        {
            "location": "/js_backend/#method-overrides", 
            "text": "In the example above, you might be wondering why in the JavaScript translation, is the class A constructor calling  A.__init__(this, x,y,z) , and why is the  __init__  method assigned  A.prototype  and then wrapped and assigned to  A.__init__ .  This is done so that subclasses are able to override their parent's methods, but still have a way of calling them, an example that subclasses A will make this more clear.      class B( A ):\n        def __init__(self, w):\n            A.__init__(self, 10, 20, 30)\n            self.w = w", 
            "title": "Method Overrides"
        }, 
        {
            "location": "/js_backend/#javascript_1", 
            "text": "B = function(w) {\n      B.__init__(this, w);\n    }\n\n    B.prototype.__init__ = function(w) {\n      A.__init__(this,10,20,30);\n      this.w=w;\n    }\n    B.__init__ = function () { return B.prototype.__init__.apply(arguments[0], Array.prototype.slice.call(arguments,1)) };\n\n    for (var n in A.prototype) {  if (!(n in B.prototype)) {    B.prototype[n] = A.prototype[n]  }};  The above output Javascript shows how the constructor for  B  calls  B.__init__  which then calls  B.prototype.__init__ . B.prototype.__init__  calls  A.__init__  passing  this  as the first argument.  This emulates in JavaScript how unbound methods work in Python.  When using the Dart backend, the output is different but the concept is the same - static \"class methods\" are created that implement the method body, the instance methods are just short stubs that call the static \"class methods\".", 
            "title": "javascript"
        }, 
        {
            "location": "/js_backend/#webworkers", 
            "text": "Using webworkers directly, straight sucks.  PythonJS hides all that shit, so you can write clear code with a syntax inspired by Golang.  This syntax  A  - B , sends data to  A  which is an instance that was spawned into the webworker-pool.  This syntax  N =  - A , gets data from  A , note that this appears to be blocking code, but it is actually not (the transpiler transforms it into async code)  \nwith webworker:\n    class MyClass:\n        def send(self, msg):\n            return msg\n\n\nw = spawn( MyClass() )\nw  - 'hello'\nw  - 'world'\n\na =  - w\nb =  - w\nprint a + b", 
            "title": "WebWorkers"
        }, 
        {
            "location": "/js_backend/#generator-functions", 
            "text": "Functions that use the  yield  keyword are generator functions.  They allow you to quickly write complex iterables.\nPythonJS supports simple generator functions that have a single for loop, and up to three  yield  statements.\nThe first  yield  comes before the for loop, and the final  yield  comes after the for loop.\nThe compiler will translate your generator function into a simple class with state-machine.  This implementation\nbypasses using the native JavaScript  yield  keyword, and ensures that your generator function can work in all web browsers.    Instances of the generator function will have a next method.  Using a for loop to iterate over a generator function will automatically call its next method.      def fib(n):\n        yield 'hello'\n        a, b = 0, 1\n        for x in range(n):\n            yield a\n            a,b = b, a+b\n        yield 'world'\n\n    def test():\n        for n in fib(20):\n            print n", 
            "title": "Generator Functions"
        }, 
        {
            "location": "/js_backend/#javascript_2", 
            "text": "fib = function(n) {\n      this.n = n;\n      this.__head_yield =  hello ;\n      this.__head_returned = 0;\n      var __r_0;\n      __r_0 = [0, 1];\n      this.a = __r_0[0];\n      this.b = __r_0[1];\n      this.__iter_start = 0;\n      this.__iter_index = 0;\n      this.__iter_end = this.n;\n      this.__done__ = 0;\n    }\n\n    fib.prototype.next = function() {\n      if (( this.__head_returned ) == 0) {\n        this.__head_returned = 1;\n        return this.__head_yield;\n      } else {\n        if (( this.__iter_index )   this.__iter_end) {\n          __yield_return__ = this.a;\n          var __r_1;\n          __r_1 = [this.b, (this.a + this.b)];\n          this.a = __r_1[0];\n          this.b = __r_1[1];\n          this.__iter_index += 1\n          return __yield_return__;\n        } else {\n          this.__done__ = 1;\n          __yield_return__ =  world ;\n          return __yield_return__;\n        }\n      }\n    }\n\n    test = function(args, kwargs) {\n      var __iterator__, n;\n      var n, __generator__;\n      __generator__ = new fib(20);\n      while(( __generator__.__done__ ) != 1) {\n        n = __generator__.next();\n        console.log(n);\n      }\n    }", 
            "title": "javascript"
        }, 
        {
            "location": "/js_backend/#inline-javascript", 
            "text": "Use  inline(str)  to inline javascript code      inline( var arr = new Array() )\n    inline( var ob = new Object() )\n    inline( ob['key'] = 'value' )\n    if inline( Object.prototype.toString.call( arr ) === '[object Array]' ):\n        inline( arr.push('hello world') )\n        inline( arr.push( ob ) )", 
            "title": "Inline JavaScript"
        }
    ]
}